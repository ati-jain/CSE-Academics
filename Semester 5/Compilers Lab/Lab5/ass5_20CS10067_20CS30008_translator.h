/* Compilers Assignment - 4 */
/* Atishay Jain (20CS30008) */
/* Suvvari Venkata Sai Suvvari (20CS10067) */

#ifndef _TRANSLATOR_H
#define _TRANSLATOR_H

#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <list>
#include <functional>
#include <iomanip>
#include <string.h>
using namespace std;

class symbl_type;
class symbl_table;
class symbl;
class Label;
class Quad;
class Expression;
class Array;
class Statement;

// Symbol type class ( type safe representation for the type of a symbol )
class symbl_type {
    public:
        enum typeEnum {VOID, CHAR, INT, FLOAT, POINTER, FUNCTION, ARRAY, BLOCK} type;  // type of the symbol, scoped enum for safe comparisons
        int width;   // width of the symbol
        symbl_type *arrayType;  // type of the array elements

        symbl_type(typeEnum, symbl_type * = NULL, int = 1);  // constructor
        int getSize();  // returns the size(width) of the symbol
        string toString(); // returns the string representation of the type
};

// Symbol table class
class symbl_table {
    public:
        string name;  // name of the symbol table
        map<string, symbl> symbols;    // list of all symbols in this table, mapped by their names for fast access
        symbl_table *parent;            // parent symbol table of this symbol table
        
        symbl_table(string = "NULL", symbl_table * = NULL); // constructor
        symbl *lookup(string); // returns the symbol with the given name, adds new entry if not found
        void print();  // prints the symbol table
        void update(); // updates the symbol table
};

// Symbol class ( represents a single symbol in the symbol table )
class symbl {
    public:
        string name;  // name of the symbol
        int size, offset; // size and offset of the symbol
        symbl_type *type;  // type of the symbol
        symbl_table *nestedTable;  // pointer to the symbol table if it is a nested entry
        string initialValue;  // initial value of the symbol
        bool isFunction; // flag to indicate if the symbol represents a function or not
                         // if it does represent a function the return type will be given by the type attribute

        symbl(string, symbl_type::typeEnum = symbl_type::INT, string = "");  // constructor
        symbl *update(symbl_type *);  // updates the symbol with the given type
        symbl *convert(symbl_type::typeEnum);  // converts the symbol to the given type
};

// Quad class ( represents a 3-address quad )
class Quad {
    public:
        string op, arg1, arg2, result;  // parameters of the quad

        Quad(string, string, string = "=", string = "");  // constructor
        Quad(string, int, string = "=", string = ""); // constructor
        void print();  // prints the quad
};

// Expression attributes
class Expression {
    public:
        symbl *symbol;  // symbol of the expression
        enum typeEnum {NONBOOLEAN, BOOLEAN} type;  // type of the expression scoped enum
        list<int> trueList, falseList, nextList;  // lists of quad numbers for next, true and false jumps

        void toInt();  // converts the expression to an integer
        void toBool();  // converts the expression to a boolean
};

// Array attributes
class Array {
    public:
        symbl *temp;    // temporary used for computing the offset for the array reference
        enum typeEnum {OTHER, POINTER, ARRAY} type;    // Pointers, arrays and normal expressions are all stored using array attributes initially
        symbl *symbol;  // pointer to the symbol table entry
        symbl_type *subArrayType;   // type of the sub-array generated by A
};

// Statement attributes
class Statement {
    public:
        list<int> nextList;     // List of quads having dangling exits for this statement
};

// Global variables
extern vector<Quad *> quadArray; // array of quads
extern symbl_table *currentTable, *globalTable; // current and global symbol tables
extern symbl *currentSymbol;  // current symbol
extern symbl_type::typeEnum currentType;  // current type
extern int tableCount, temporaryCount; // counters for symbol table and temporary symbols

// Emit functions for generating quads
void emit(string, string, string = "", string = "");  // emits a quad with the given parameters
void emit(string, string, int, string = "");  // emits a quad with the given parameters

// Backpatching functions
void backpatch(list<int>, int);  // backpatches the list of quads with the given address
list<int> makeList(int);  // makes a list with the given number
list<int> merge(list<int>, list<int>); // merges the two lists

// Other helper functions

int nextInstruction();  // returns the next instruction number
symbl *gentemp(symbl_type::typeEnum, string = "");  // generates a new temporary symbol
void changeTable(symbl_table *);  // changes the current symbol table to the given one

// Type checking and conversions
bool typeCheck(symbl *&, symbl *&);  // checks if the two symbols have the same type

// Utility functions
string toString(int);  // returns the string representation of the given integer
string toString(float);  // returns the string representation of the given float
string toString(char);  // returns the string representation of the given character

extern int yyparse();

#endif