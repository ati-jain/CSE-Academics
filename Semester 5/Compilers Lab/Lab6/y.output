Terminals unused in grammar

    STRUCT
    TYPEDEF
    UNION
    HASH


Grammar

    0 $accept: translation_unit $end

    1 primary_expression: IDENTIFIER
    2                   | constant
    3                   | STRING_LITERAL
    4                   | ROBRAOPEN expression ROBRACLOSE

    5 constant: INTEGER_CONSTANT
    6         | FLOATING_CONSTANT
    7         | ENUMERATION_CONSTANT
    8         | CHARACTER_CONSTANT

    9 postfix_expression: primary_expression
   10                   | postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | postfix_expression DOT IDENTIFIER
   14                   | postfix_expression ACC IDENTIFIER
   15                   | postfix_expression INC
   16                   | postfix_expression DEC
   17                   | ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE

   19 argument_expression_list: assignment_expression
   20                         | argument_expression_list COMMA assignment_expression

   21 unary_expression: postfix_expression
   22                 | INC unary_expression
   23                 | DEC unary_expression
   24                 | unary_operator cast_expression
   25                 | SIZEOF unary_expression
   26                 | SIZEOF ROBRAOPEN type_name ROBRACLOSE

   27 unary_operator: AMP
   28               | MUL
   29               | ADD
   30               | SUB
   31               | NEG
   32               | EXCLAIM

   33 cast_expression: unary_expression
   34                | ROBRAOPEN type_name ROBRACLOSE cast_expression

   35 multiplicative_expression: cast_expression
   36                          | multiplicative_expression MUL cast_expression
   37                          | multiplicative_expression DIV cast_expression
   38                          | multiplicative_expression MODULO cast_expression

   39 additive_expression: multiplicative_expression
   40                    | additive_expression ADD multiplicative_expression
   41                    | additive_expression SUB multiplicative_expression

   42 shift_expression: additive_expression
   43                 | shift_expression SHL additive_expression
   44                 | shift_expression SHR additive_expression

   45 relational_expression: shift_expression
   46                      | relational_expression BITSHL shift_expression
   47                      | relational_expression BITSHR shift_expression
   48                      | relational_expression LTE shift_expression
   49                      | relational_expression GTE shift_expression

   50 equality_expression: relational_expression
   51                    | equality_expression EQ relational_expression
   52                    | equality_expression NEQ relational_expression

   53 AND_expression: equality_expression
   54               | AND_expression AMP equality_expression

   55 exclusive_OR_expression: AND_expression
   56                        | exclusive_OR_expression BITXOR AND_expression

   57 inclusive_OR_expression: exclusive_OR_expression
   58                        | inclusive_OR_expression BITOR exclusive_OR_expression

   59 logical_AND_expression: inclusive_OR_expression
   60                       | logical_AND_expression N AND M inclusive_OR_expression

   61 logical_OR_expression: logical_AND_expression
   62                      | logical_OR_expression N OR M logical_AND_expression

   63 M: ε

   64 N: ε

   65 conditional_expression: logical_OR_expression
   66                       | logical_OR_expression N QUESTION M expression N COLON M conditional_expression

   67 assignment_expression: conditional_expression
   68                      | unary_expression assignment_operator assignment_expression

   69 assignment_operator: ASSIGN
   70                    | STAREQ
   71                    | DIVEQ
   72                    | MODEQ
   73                    | PLUSEQ
   74                    | MINUSEQ
   75                    | SHLEQ
   76                    | SHREQ
   77                    | BINANDEQ
   78                    | BINXOREQ
   79                    | BINOREQ

   80 expression: assignment_expression
   81           | expression COMMA assignment_expression

   82 constant_expression: conditional_expression

   83 declaration: declaration_specifiers init_declarator_list SEMICOLON
   84            | declaration_specifiers SEMICOLON

   85 declaration_specifiers: storage_class_specifier declaration_specifiers
   86                       | storage_class_specifier
   87                       | type_specifier declaration_specifiers
   88                       | type_specifier
   89                       | type_qualifier declaration_specifiers
   90                       | type_qualifier
   91                       | function_specifier declaration_specifiers
   92                       | function_specifier

   93 init_declarator_list: init_declarator
   94                     | init_declarator_list COMMA init_declarator

   95 init_declarator: declarator
   96                | declarator ASSIGN initializer

   97 storage_class_specifier: EXTERN
   98                        | STATIC
   99                        | AUTO
  100                        | REGISTER

  101 type_specifier: VOID
  102               | CHAR
  103               | SHORT
  104               | INT
  105               | LONG
  106               | FLOAT
  107               | DOUBLE
  108               | SIGNED
  109               | UNSIGNED
  110               | BOOL
  111               | COMPLEX
  112               | IMAGINARY
  113               | enum_specifier

  114 specifier_qualifier_list: type_specifier specifier_qualifier_list
  115                         | type_specifier
  116                         | type_qualifier specifier_qualifier_list
  117                         | type_qualifier

  118 enum_specifier: ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | ENUM CURBRAOPEN enumerator_list CURBRACLOSE
  120               | ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | ENUM IDENTIFIER

  123 enumerator_list: enumerator
  124                | enumerator_list COMMA enumerator

  125 enumerator: IDENTIFIER
  126           | IDENTIFIER ASSIGN constant_expression

  127 type_qualifier: CONST
  128               | RESTRICT
  129               | VOLATILE

  130 function_specifier: INLINE

  131 declarator: pointer direct_declarator
  132           | direct_declarator

  133 direct_declarator: IDENTIFIER
  134                  | ROBRAOPEN declarator ROBRACLOSE
  135                  | direct_declarator SQBRAOPEN type_qualifier_list assignment_expression SQBRACLOSE
  136                  | direct_declarator SQBRAOPEN type_qualifier_list SQBRACLOSE
  137                  | direct_declarator SQBRAOPEN assignment_expression SQBRACLOSE
  138                  | direct_declarator SQBRAOPEN SQBRACLOSE
  139                  | direct_declarator SQBRAOPEN STATIC type_qualifier_list assignment_expression SQBRACLOSE
  140                  | direct_declarator SQBRAOPEN STATIC assignment_expression SQBRACLOSE
  141                  | direct_declarator SQBRAOPEN type_qualifier_list MUL SQBRACLOSE
  142                  | direct_declarator SQBRAOPEN MUL SQBRACLOSE
  143                  | direct_declarator ROBRAOPEN CT parameter_type_list ROBRACLOSE
  144                  | direct_declarator ROBRAOPEN identifier_list ROBRACLOSE
  145                  | direct_declarator ROBRAOPEN CT ROBRACLOSE

  146 CT: ε

  147 pointer: MUL type_qualifier_list
  148        | MUL
  149        | MUL type_qualifier_list pointer
  150        | MUL pointer

  151 type_qualifier_list: type_qualifier
  152                    | type_qualifier_list type_qualifier

  153 parameter_type_list: parameter_list
  154                    | parameter_list COMMA DOTS

  155 parameter_list: parameter_declaration
  156               | parameter_list COMMA parameter_declaration

  157 parameter_declaration: declaration_specifiers declarator
  158                      | declaration_specifiers

  159 identifier_list: IDENTIFIER
  160                | identifier_list COMMA IDENTIFIER

  161 type_name: specifier_qualifier_list

  162 initializer: assignment_expression
  163            | CURBRAOPEN initializer_list CURBRACLOSE
  164            | CURBRAOPEN initializer_list COMMA CURBRACLOSE

  165 initializer_list: designation initializer
  166                 | initializer
  167                 | initializer_list COMMA designation initializer
  168                 | initializer_list COMMA initializer

  169 designation: designator_list ASSIGN

  170 designator_list: designator
  171                | designator_list designator

  172 designator: SQBRAOPEN constant_expression SQBRACLOSE
  173           | DOT IDENTIFIER

  174 statement: labeled_statement
  175          | compound_statement
  176          | expression_statement
  177          | selection_statement
  178          | iteration_statement
  179          | jump_statement

  180 labeled_statement: IDENTIFIER COLON statement
  181                  | CASE constant_expression COLON statement
  182                  | DEFAULT COLON statement

  183 compound_statement: CURBRAOPEN block_item_list CURBRACLOSE
  184                   | CURBRAOPEN CURBRACLOSE

  185 block_item_list: block_item
  186                | block_item_list M block_item

  187 block_item: declaration
  188           | statement

  189 expression_statement: expression SEMICOLON
  190                     | SEMICOLON

  191 selection_statement: IF ROBRAOPEN expression N ROBRACLOSE M statement N
  192                    | IF ROBRAOPEN expression N ROBRACLOSE M statement N ELSE M statement
  193                    | SWITCH ROBRAOPEN expression ROBRACLOSE statement

  194 iteration_statement: WHILE M ROBRAOPEN expression ROBRACLOSE M statement
  195                    | DO M statement M WHILE ROBRAOPEN expression ROBRACLOSE SEMICOLON
  196                    | FOR ROBRAOPEN expression_statement M expression_statement ROBRACLOSE M statement
  197                    | FOR ROBRAOPEN expression_statement M expression_statement M expression N ROBRACLOSE M statement

  198 jump_statement: GOTO IDENTIFIER SEMICOLON
  199               | CONTINUE SEMICOLON
  200               | BREAK SEMICOLON
  201               | RETURN expression SEMICOLON
  202               | RETURN SEMICOLON

  203 translation_unit: external_declaration
  204                 | translation_unit external_declaration

  205 external_declaration: function_definition
  206                     | declaration

  207 function_definition: declaration_specifiers declarator declaration_list CT compound_statement
  208                    | declaration_specifiers declarator CT compound_statement

  209 declaration_list: declaration
  210                 | declaration_list declaration


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    AUTO (258) 99
    ENUM (259) 118 119 120 121 122
    RESTRICT (260) 128
    UNSIGNED (261) 109
    BREAK (262) 200
    EXTERN (263) 97
    RETURN (264) 201 202
    VOID (265) 101
    CASE (266) 181
    FLOAT (267) 106
    SHORT (268) 103
    VOLATILE (269) 129
    CHAR (270) 102
    FOR (271) 196 197
    SIGNED (272) 108
    WHILE (273) 194 195
    CONST (274) 127
    GOTO (275) 198
    SIZEOF (276) 25 26
    BOOL (277) 110
    CONTINUE (278) 199
    IF (279) 191 192
    STATIC (280) 98 139 140
    COMPLEX (281) 111
    DEFAULT (282) 182
    INLINE (283) 130
    STRUCT (284)
    IMAGINARY (285) 112
    DO (286) 195
    INT (287) 104
    SWITCH (288) 193
    DOUBLE (289) 107
    LONG (290) 105
    TYPEDEF (291)
    ELSE (292) 192
    REGISTER (293) 100
    UNION (294)
    IDENTIFIER <symp> (295) 1 13 14 118 120 122 125 126 133 159 160 173 180 198
    INTEGER_CONSTANT <intval> (296) 5
    FLOATING_CONSTANT <charval> (297) 6
    CHARACTER_CONSTANT <charval> (298) 8
    ENUMERATION_CONSTANT <charval> (299) 7
    STRING_LITERAL <charval> (300) 3
    SQBRAOPEN (301) 10 135 136 137 138 139 140 141 142 172
    SQBRACLOSE (302) 10 135 136 137 138 139 140 141 142 172
    ROBRAOPEN (303) 4 11 12 17 18 26 34 134 143 144 145 191 192 193 194 195 196 197
    ROBRACLOSE (304) 4 11 12 17 18 26 34 134 143 144 145 191 192 193 194 195 196 197
    CURBRAOPEN (305) 17 18 118 119 120 121 163 164 183 184
    CURBRACLOSE (306) 17 18 118 119 120 121 163 164 183 184
    DOT (307) 13 173
    ACC (308) 14
    INC (309) 15 22
    DEC (310) 16 23
    AMP (311) 27 54
    MUL (312) 28 36 141 142 147 148 149 150
    ADD (313) 29 40
    SUB (314) 30 41
    NEG (315) 31
    EXCLAIM (316) 32
    DIV (317) 37
    MODULO (318) 38
    SHL (319) 43
    SHR (320) 44
    BITSHL (321) 46
    BITSHR (322) 47
    LTE (323) 48
    GTE (324) 49
    EQ (325) 51
    NEQ (326) 52
    BITXOR (327) 56
    BITOR (328) 58
    AND (329) 60
    OR (330) 62
    QUESTION (331) 66
    COLON (332) 66 180 181 182
    SEMICOLON (333) 83 84 189 190 195 198 199 200 201 202
    DOTS (334) 154
    ASSIGN (335) 69 96 126 169
    STAREQ (336) 70
    DIVEQ (337) 71
    MODEQ (338) 72
    PLUSEQ (339) 73
    MINUSEQ (340) 74
    SHLEQ (341) 75
    SHREQ (342) 76
    BINANDEQ (343) 77
    BINXOREQ (344) 78
    BINOREQ (345) 79
    COMMA (346) 18 20 81 94 120 121 124 154 156 160 164 167 168
    HASH (347)
    THEN (348)


Nonterminals, with rules where they appear

    $accept (94)
        on left: 0
    primary_expression <E> (95)
        on left: 1 2 3 4
        on right: 9
    constant <symp> (96)
        on left: 5 6 7 8
        on right: 2
    postfix_expression <A> (97)
        on left: 9 10 11 12 13 14 15 16 17 18
        on right: 10 11 12 13 14 15 16 21
    argument_expression_list <intval> (98)
        on left: 19 20
        on right: 12 20
    unary_expression <A> (99)
        on left: 21 22 23 24 25 26
        on right: 22 23 25 33 68
    unary_operator <unaryOperator> (100)
        on left: 27 28 29 30 31 32
        on right: 24
    cast_expression <A> (101)
        on left: 33 34
        on right: 24 34 35 36 37 38
    multiplicative_expression <E> (102)
        on left: 35 36 37 38
        on right: 36 37 38 39 40 41
    additive_expression <E> (103)
        on left: 39 40 41
        on right: 40 41 42 43 44
    shift_expression <E> (104)
        on left: 42 43 44
        on right: 43 44 45 46 47 48 49
    relational_expression <E> (105)
        on left: 45 46 47 48 49
        on right: 46 47 48 49 50 51 52
    equality_expression <E> (106)
        on left: 50 51 52
        on right: 51 52 53 54
    AND_expression <E> (107)
        on left: 53 54
        on right: 54 55 56
    exclusive_OR_expression <E> (108)
        on left: 55 56
        on right: 56 57 58
    inclusive_OR_expression <E> (109)
        on left: 57 58
        on right: 58 59 60
    logical_AND_expression <E> (110)
        on left: 59 60
        on right: 60 61 62
    logical_OR_expression <E> (111)
        on left: 61 62
        on right: 62 65 66
    M <instr> (112)
        on left: 63
        on right: 60 62 66 186 191 192 194 195 196 197
    N <S> (113)
        on left: 64
        on right: 60 62 66 191 192 197
    conditional_expression <E> (114)
        on left: 65 66
        on right: 66 67 82
    assignment_expression <E> (115)
        on left: 67 68
        on right: 19 20 68 80 81 135 137 139 140 162
    assignment_operator (116)
        on left: 69 70 71 72 73 74 75 76 77 78 79
        on right: 68
    expression <E> (117)
        on left: 80 81
        on right: 4 10 66 81 189 191 192 193 194 195 197 201
    constant_expression (118)
        on left: 82
        on right: 126 172 181
    declaration (119)
        on left: 83 84
        on right: 187 206 209 210
    declaration_specifiers (120)
        on left: 85 86 87 88 89 90 91 92
        on right: 83 84 85 87 89 91 157 158 207 208
    init_declarator_list (121)
        on left: 93 94
        on right: 83 94
    init_declarator <symp> (122)
        on left: 95 96
        on right: 93 94
    storage_class_specifier (123)
        on left: 97 98 99 100
        on right: 85 86
    type_specifier (124)
        on left: 101 102 103 104 105 106 107 108 109 110 111 112 113
        on right: 87 88 114 115
    specifier_qualifier_list (125)
        on left: 114 115 116 117
        on right: 114 116 161
    enum_specifier (126)
        on left: 118 119 120 121 122
        on right: 113
    enumerator_list (127)
        on left: 123 124
        on right: 118 119 120 121 124
    enumerator (128)
        on left: 125 126
        on right: 123 124
    type_qualifier (129)
        on left: 127 128 129
        on right: 89 90 116 117 151 152
    function_specifier (130)
        on left: 130
        on right: 91 92
    declarator <symp> (131)
        on left: 131 132
        on right: 95 96 134 157 207 208
    direct_declarator <symp> (132)
        on left: 133 134 135 136 137 138 139 140 141 142 143 144 145
        on right: 131 132 135 136 137 138 139 140 141 142 143 144 145
    CT (133)
        on left: 146
        on right: 143 145 207 208
    pointer <symtp> (134)
        on left: 147 148 149 150
        on right: 131 149 150
    type_qualifier_list (135)
        on left: 151 152
        on right: 135 136 139 141 147 149 152
    parameter_type_list (136)
        on left: 153 154
        on right: 143
    parameter_list (137)
        on left: 155 156
        on right: 153 154 156
    parameter_declaration (138)
        on left: 157 158
        on right: 155 156
    identifier_list (139)
        on left: 159 160
        on right: 144 160
    type_name (140)
        on left: 161
        on right: 17 18 26 34
    initializer <symp> (141)
        on left: 162 163 164
        on right: 96 165 166 167 168
    initializer_list (142)
        on left: 165 166 167 168
        on right: 17 18 163 164 167 168
    designation (143)
        on left: 169
        on right: 165 167
    designator_list (144)
        on left: 170 171
        on right: 169 171
    designator (145)
        on left: 172 173
        on right: 170 171
    statement <S> (146)
        on left: 174 175 176 177 178 179
        on right: 180 181 182 188 191 192 193 194 195 196 197
    labeled_statement <S> (147)
        on left: 180 181 182
        on right: 174
    compound_statement <S> (148)
        on left: 183 184
        on right: 175 207 208
    block_item_list <S> (149)
        on left: 185 186
        on right: 183 186
    block_item <S> (150)
        on left: 187 188
        on right: 185 186
    expression_statement <E> (151)
        on left: 189 190
        on right: 176 196 197
    selection_statement <S> (152)
        on left: 191 192 193
        on right: 177
    iteration_statement <S> (153)
        on left: 194 195 196 197
        on right: 178
    jump_statement <S> (154)
        on left: 198 199 200 201 202
        on right: 179
    translation_unit (155)
        on left: 203 204
        on right: 0 204
    external_declaration (156)
        on left: 205 206
        on right: 203 204
    function_definition (157)
        on left: 207 208
        on right: 205
    declaration_list (158)
        on left: 209 210
        on right: 207 210


State 0

    0 $accept: • translation_unit $end
   83 declaration: • declaration_specifiers init_declarator_list SEMICOLON
   84            | • declaration_specifiers SEMICOLON
   85 declaration_specifiers: • storage_class_specifier declaration_specifiers
   86                       | • storage_class_specifier
   87                       | • type_specifier declaration_specifiers
   88                       | • type_specifier
   89                       | • type_qualifier declaration_specifiers
   90                       | • type_qualifier
   91                       | • function_specifier declaration_specifiers
   92                       | • function_specifier
   97 storage_class_specifier: • EXTERN
   98                        | • STATIC
   99                        | • AUTO
  100                        | • REGISTER
  101 type_specifier: • VOID
  102               | • CHAR
  103               | • SHORT
  104               | • INT
  105               | • LONG
  106               | • FLOAT
  107               | • DOUBLE
  108               | • SIGNED
  109               | • UNSIGNED
  110               | • BOOL
  111               | • COMPLEX
  112               | • IMAGINARY
  113               | • enum_specifier
  118 enum_specifier: • ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | • ENUM CURBRAOPEN enumerator_list CURBRACLOSE
  120               | • ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | • ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | • ENUM IDENTIFIER
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  130 function_specifier: • INLINE
  203 translation_unit: • external_declaration
  204                 | • translation_unit external_declaration
  205 external_declaration: • function_definition
  206                     | • declaration
  207 function_definition: • declaration_specifiers declarator declaration_list CT compound_statement
  208                    | • declaration_specifiers declarator CT compound_statement

    AUTO       shift, and go to state 1
    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    EXTERN     shift, and go to state 5
    VOID       shift, and go to state 6
    FLOAT      shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR       shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL       shift, and go to state 13
    STATIC     shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    declaration              go to state 22
    declaration_specifiers   go to state 23
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    translation_unit         go to state 29
    external_declaration     go to state 30
    function_definition      go to state 31


State 1

   99 storage_class_specifier: AUTO •

    $default  reduce using rule 99 (storage_class_specifier)


State 2

  118 enum_specifier: ENUM • IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | ENUM • CURBRAOPEN enumerator_list CURBRACLOSE
  120               | ENUM • IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | ENUM • CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | ENUM • IDENTIFIER

    IDENTIFIER  shift, and go to state 32
    CURBRAOPEN  shift, and go to state 33


State 3

  128 type_qualifier: RESTRICT •

    $default  reduce using rule 128 (type_qualifier)


State 4

  109 type_specifier: UNSIGNED •

    $default  reduce using rule 109 (type_specifier)


State 5

   97 storage_class_specifier: EXTERN •

    $default  reduce using rule 97 (storage_class_specifier)


State 6

  101 type_specifier: VOID •

    $default  reduce using rule 101 (type_specifier)


State 7

  106 type_specifier: FLOAT •

    $default  reduce using rule 106 (type_specifier)


State 8

  103 type_specifier: SHORT •

    $default  reduce using rule 103 (type_specifier)


State 9

  129 type_qualifier: VOLATILE •

    $default  reduce using rule 129 (type_qualifier)


State 10

  102 type_specifier: CHAR •

    $default  reduce using rule 102 (type_specifier)


State 11

  108 type_specifier: SIGNED •

    $default  reduce using rule 108 (type_specifier)


State 12

  127 type_qualifier: CONST •

    $default  reduce using rule 127 (type_qualifier)


State 13

  110 type_specifier: BOOL •

    $default  reduce using rule 110 (type_specifier)


State 14

   98 storage_class_specifier: STATIC •

    $default  reduce using rule 98 (storage_class_specifier)


State 15

  111 type_specifier: COMPLEX •

    $default  reduce using rule 111 (type_specifier)


State 16

  130 function_specifier: INLINE •

    $default  reduce using rule 130 (function_specifier)


State 17

  112 type_specifier: IMAGINARY •

    $default  reduce using rule 112 (type_specifier)


State 18

  104 type_specifier: INT •

    $default  reduce using rule 104 (type_specifier)


State 19

  107 type_specifier: DOUBLE •

    $default  reduce using rule 107 (type_specifier)


State 20

  105 type_specifier: LONG •

    $default  reduce using rule 105 (type_specifier)


State 21

  100 storage_class_specifier: REGISTER •

    $default  reduce using rule 100 (storage_class_specifier)


State 22

  206 external_declaration: declaration •

    $default  reduce using rule 206 (external_declaration)


State 23

   83 declaration: declaration_specifiers • init_declarator_list SEMICOLON
   84            | declaration_specifiers • SEMICOLON
   93 init_declarator_list: • init_declarator
   94                     | • init_declarator_list COMMA init_declarator
   95 init_declarator: • declarator
   96                | • declarator ASSIGN initializer
  131 declarator: • pointer direct_declarator
  132           | • direct_declarator
  133 direct_declarator: • IDENTIFIER
  134                  | • ROBRAOPEN declarator ROBRACLOSE
  135                  | • direct_declarator SQBRAOPEN type_qualifier_list assignment_expression SQBRACLOSE
  136                  | • direct_declarator SQBRAOPEN type_qualifier_list SQBRACLOSE
  137                  | • direct_declarator SQBRAOPEN assignment_expression SQBRACLOSE
  138                  | • direct_declarator SQBRAOPEN SQBRACLOSE
  139                  | • direct_declarator SQBRAOPEN STATIC type_qualifier_list assignment_expression SQBRACLOSE
  140                  | • direct_declarator SQBRAOPEN STATIC assignment_expression SQBRACLOSE
  141                  | • direct_declarator SQBRAOPEN type_qualifier_list MUL SQBRACLOSE
  142                  | • direct_declarator SQBRAOPEN MUL SQBRACLOSE
  143                  | • direct_declarator ROBRAOPEN CT parameter_type_list ROBRACLOSE
  144                  | • direct_declarator ROBRAOPEN identifier_list ROBRACLOSE
  145                  | • direct_declarator ROBRAOPEN CT ROBRACLOSE
  147 pointer: • MUL type_qualifier_list
  148        | • MUL
  149        | • MUL type_qualifier_list pointer
  150        | • MUL pointer
  207 function_definition: declaration_specifiers • declarator declaration_list CT compound_statement
  208                    | declaration_specifiers • declarator CT compound_statement

    IDENTIFIER  shift, and go to state 34
    ROBRAOPEN   shift, and go to state 35
    MUL         shift, and go to state 36
    SEMICOLON   shift, and go to state 37

    init_declarator_list  go to state 38
    init_declarator       go to state 39
    declarator            go to state 40
    direct_declarator     go to state 41
    pointer               go to state 42


State 24

   85 declaration_specifiers: • storage_class_specifier declaration_specifiers
   85                       | storage_class_specifier • declaration_specifiers
   86                       | • storage_class_specifier
   86                       | storage_class_specifier •  [IDENTIFIER, ROBRAOPEN, ROBRACLOSE, MUL, SEMICOLON, COMMA]
   87                       | • type_specifier declaration_specifiers
   88                       | • type_specifier
   89                       | • type_qualifier declaration_specifiers
   90                       | • type_qualifier
   91                       | • function_specifier declaration_specifiers
   92                       | • function_specifier
   97 storage_class_specifier: • EXTERN
   98                        | • STATIC
   99                        | • AUTO
  100                        | • REGISTER
  101 type_specifier: • VOID
  102               | • CHAR
  103               | • SHORT
  104               | • INT
  105               | • LONG
  106               | • FLOAT
  107               | • DOUBLE
  108               | • SIGNED
  109               | • UNSIGNED
  110               | • BOOL
  111               | • COMPLEX
  112               | • IMAGINARY
  113               | • enum_specifier
  118 enum_specifier: • ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | • ENUM CURBRAOPEN enumerator_list CURBRACLOSE
  120               | • ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | • ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | • ENUM IDENTIFIER
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  130 function_specifier: • INLINE

    AUTO       shift, and go to state 1
    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    EXTERN     shift, and go to state 5
    VOID       shift, and go to state 6
    FLOAT      shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR       shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL       shift, and go to state 13
    STATIC     shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    $default  reduce using rule 86 (declaration_specifiers)

    declaration_specifiers   go to state 43
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28


State 25

   85 declaration_specifiers: • storage_class_specifier declaration_specifiers
   86                       | • storage_class_specifier
   87                       | • type_specifier declaration_specifiers
   87                       | type_specifier • declaration_specifiers
   88                       | • type_specifier
   88                       | type_specifier •  [IDENTIFIER, ROBRAOPEN, ROBRACLOSE, MUL, SEMICOLON, COMMA]
   89                       | • type_qualifier declaration_specifiers
   90                       | • type_qualifier
   91                       | • function_specifier declaration_specifiers
   92                       | • function_specifier
   97 storage_class_specifier: • EXTERN
   98                        | • STATIC
   99                        | • AUTO
  100                        | • REGISTER
  101 type_specifier: • VOID
  102               | • CHAR
  103               | • SHORT
  104               | • INT
  105               | • LONG
  106               | • FLOAT
  107               | • DOUBLE
  108               | • SIGNED
  109               | • UNSIGNED
  110               | • BOOL
  111               | • COMPLEX
  112               | • IMAGINARY
  113               | • enum_specifier
  118 enum_specifier: • ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | • ENUM CURBRAOPEN enumerator_list CURBRACLOSE
  120               | • ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | • ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | • ENUM IDENTIFIER
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  130 function_specifier: • INLINE

    AUTO       shift, and go to state 1
    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    EXTERN     shift, and go to state 5
    VOID       shift, and go to state 6
    FLOAT      shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR       shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL       shift, and go to state 13
    STATIC     shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    $default  reduce using rule 88 (declaration_specifiers)

    declaration_specifiers   go to state 44
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28


State 26

  113 type_specifier: enum_specifier •

    $default  reduce using rule 113 (type_specifier)


State 27

   85 declaration_specifiers: • storage_class_specifier declaration_specifiers
   86                       | • storage_class_specifier
   87                       | • type_specifier declaration_specifiers
   88                       | • type_specifier
   89                       | • type_qualifier declaration_specifiers
   89                       | type_qualifier • declaration_specifiers
   90                       | • type_qualifier
   90                       | type_qualifier •  [IDENTIFIER, ROBRAOPEN, ROBRACLOSE, MUL, SEMICOLON, COMMA]
   91                       | • function_specifier declaration_specifiers
   92                       | • function_specifier
   97 storage_class_specifier: • EXTERN
   98                        | • STATIC
   99                        | • AUTO
  100                        | • REGISTER
  101 type_specifier: • VOID
  102               | • CHAR
  103               | • SHORT
  104               | • INT
  105               | • LONG
  106               | • FLOAT
  107               | • DOUBLE
  108               | • SIGNED
  109               | • UNSIGNED
  110               | • BOOL
  111               | • COMPLEX
  112               | • IMAGINARY
  113               | • enum_specifier
  118 enum_specifier: • ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | • ENUM CURBRAOPEN enumerator_list CURBRACLOSE
  120               | • ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | • ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | • ENUM IDENTIFIER
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  130 function_specifier: • INLINE

    AUTO       shift, and go to state 1
    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    EXTERN     shift, and go to state 5
    VOID       shift, and go to state 6
    FLOAT      shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR       shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL       shift, and go to state 13
    STATIC     shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    $default  reduce using rule 90 (declaration_specifiers)

    declaration_specifiers   go to state 45
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28


State 28

   85 declaration_specifiers: • storage_class_specifier declaration_specifiers
   86                       | • storage_class_specifier
   87                       | • type_specifier declaration_specifiers
   88                       | • type_specifier
   89                       | • type_qualifier declaration_specifiers
   90                       | • type_qualifier
   91                       | • function_specifier declaration_specifiers
   91                       | function_specifier • declaration_specifiers
   92                       | • function_specifier
   92                       | function_specifier •  [IDENTIFIER, ROBRAOPEN, ROBRACLOSE, MUL, SEMICOLON, COMMA]
   97 storage_class_specifier: • EXTERN
   98                        | • STATIC
   99                        | • AUTO
  100                        | • REGISTER
  101 type_specifier: • VOID
  102               | • CHAR
  103               | • SHORT
  104               | • INT
  105               | • LONG
  106               | • FLOAT
  107               | • DOUBLE
  108               | • SIGNED
  109               | • UNSIGNED
  110               | • BOOL
  111               | • COMPLEX
  112               | • IMAGINARY
  113               | • enum_specifier
  118 enum_specifier: • ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | • ENUM CURBRAOPEN enumerator_list CURBRACLOSE
  120               | • ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | • ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | • ENUM IDENTIFIER
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  130 function_specifier: • INLINE

    AUTO       shift, and go to state 1
    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    EXTERN     shift, and go to state 5
    VOID       shift, and go to state 6
    FLOAT      shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR       shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL       shift, and go to state 13
    STATIC     shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    $default  reduce using rule 92 (declaration_specifiers)

    declaration_specifiers   go to state 46
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28


State 29

    0 $accept: translation_unit • $end
   83 declaration: • declaration_specifiers init_declarator_list SEMICOLON
   84            | • declaration_specifiers SEMICOLON
   85 declaration_specifiers: • storage_class_specifier declaration_specifiers
   86                       | • storage_class_specifier
   87                       | • type_specifier declaration_specifiers
   88                       | • type_specifier
   89                       | • type_qualifier declaration_specifiers
   90                       | • type_qualifier
   91                       | • function_specifier declaration_specifiers
   92                       | • function_specifier
   97 storage_class_specifier: • EXTERN
   98                        | • STATIC
   99                        | • AUTO
  100                        | • REGISTER
  101 type_specifier: • VOID
  102               | • CHAR
  103               | • SHORT
  104               | • INT
  105               | • LONG
  106               | • FLOAT
  107               | • DOUBLE
  108               | • SIGNED
  109               | • UNSIGNED
  110               | • BOOL
  111               | • COMPLEX
  112               | • IMAGINARY
  113               | • enum_specifier
  118 enum_specifier: • ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | • ENUM CURBRAOPEN enumerator_list CURBRACLOSE
  120               | • ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | • ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | • ENUM IDENTIFIER
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  130 function_specifier: • INLINE
  204 translation_unit: translation_unit • external_declaration
  205 external_declaration: • function_definition
  206                     | • declaration
  207 function_definition: • declaration_specifiers declarator declaration_list CT compound_statement
  208                    | • declaration_specifiers declarator CT compound_statement

    $end       shift, and go to state 47
    AUTO       shift, and go to state 1
    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    EXTERN     shift, and go to state 5
    VOID       shift, and go to state 6
    FLOAT      shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR       shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL       shift, and go to state 13
    STATIC     shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    declaration              go to state 22
    declaration_specifiers   go to state 23
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    external_declaration     go to state 48
    function_definition      go to state 31


State 30

  203 translation_unit: external_declaration •

    $default  reduce using rule 203 (translation_unit)


State 31

  205 external_declaration: function_definition •

    $default  reduce using rule 205 (external_declaration)


State 32

  118 enum_specifier: ENUM IDENTIFIER • CURBRAOPEN enumerator_list CURBRACLOSE
  120               | ENUM IDENTIFIER • CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | ENUM IDENTIFIER •  [AUTO, ENUM, RESTRICT, UNSIGNED, EXTERN, VOID, FLOAT, SHORT, VOLATILE, CHAR, SIGNED, CONST, BOOL, STATIC, COMPLEX, INLINE, IMAGINARY, INT, DOUBLE, LONG, REGISTER, IDENTIFIER, ROBRAOPEN, ROBRACLOSE, MUL, SEMICOLON, COMMA]

    CURBRAOPEN  shift, and go to state 49

    $default  reduce using rule 122 (enum_specifier)


State 33

  119 enum_specifier: ENUM CURBRAOPEN • enumerator_list CURBRACLOSE
  121               | ENUM CURBRAOPEN • enumerator_list COMMA CURBRACLOSE
  123 enumerator_list: • enumerator
  124                | • enumerator_list COMMA enumerator
  125 enumerator: • IDENTIFIER
  126           | • IDENTIFIER ASSIGN constant_expression

    IDENTIFIER  shift, and go to state 50

    enumerator_list  go to state 51
    enumerator       go to state 52


State 34

  133 direct_declarator: IDENTIFIER •

    $default  reduce using rule 133 (direct_declarator)


State 35

  131 declarator: • pointer direct_declarator
  132           | • direct_declarator
  133 direct_declarator: • IDENTIFIER
  134                  | • ROBRAOPEN declarator ROBRACLOSE
  134                  | ROBRAOPEN • declarator ROBRACLOSE
  135                  | • direct_declarator SQBRAOPEN type_qualifier_list assignment_expression SQBRACLOSE
  136                  | • direct_declarator SQBRAOPEN type_qualifier_list SQBRACLOSE
  137                  | • direct_declarator SQBRAOPEN assignment_expression SQBRACLOSE
  138                  | • direct_declarator SQBRAOPEN SQBRACLOSE
  139                  | • direct_declarator SQBRAOPEN STATIC type_qualifier_list assignment_expression SQBRACLOSE
  140                  | • direct_declarator SQBRAOPEN STATIC assignment_expression SQBRACLOSE
  141                  | • direct_declarator SQBRAOPEN type_qualifier_list MUL SQBRACLOSE
  142                  | • direct_declarator SQBRAOPEN MUL SQBRACLOSE
  143                  | • direct_declarator ROBRAOPEN CT parameter_type_list ROBRACLOSE
  144                  | • direct_declarator ROBRAOPEN identifier_list ROBRACLOSE
  145                  | • direct_declarator ROBRAOPEN CT ROBRACLOSE
  147 pointer: • MUL type_qualifier_list
  148        | • MUL
  149        | • MUL type_qualifier_list pointer
  150        | • MUL pointer

    IDENTIFIER  shift, and go to state 34
    ROBRAOPEN   shift, and go to state 35
    MUL         shift, and go to state 36

    declarator         go to state 53
    direct_declarator  go to state 41
    pointer            go to state 42


State 36

  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  147 pointer: • MUL type_qualifier_list
  147        | MUL • type_qualifier_list
  148        | • MUL
  148        | MUL •  [IDENTIFIER, ROBRAOPEN]
  149        | • MUL type_qualifier_list pointer
  149        | MUL • type_qualifier_list pointer
  150        | • MUL pointer
  150        | MUL • pointer
  151 type_qualifier_list: • type_qualifier
  152                    | • type_qualifier_list type_qualifier

    RESTRICT  shift, and go to state 3
    VOLATILE  shift, and go to state 9
    CONST     shift, and go to state 12
    MUL       shift, and go to state 36

    $default  reduce using rule 148 (pointer)

    type_qualifier       go to state 54
    pointer              go to state 55
    type_qualifier_list  go to state 56


State 37

   84 declaration: declaration_specifiers SEMICOLON •

    $default  reduce using rule 84 (declaration)


State 38

   83 declaration: declaration_specifiers init_declarator_list • SEMICOLON
   94 init_declarator_list: init_declarator_list • COMMA init_declarator

    SEMICOLON  shift, and go to state 57
    COMMA      shift, and go to state 58


State 39

   93 init_declarator_list: init_declarator •

    $default  reduce using rule 93 (init_declarator_list)


State 40

   83 declaration: • declaration_specifiers init_declarator_list SEMICOLON
   84            | • declaration_specifiers SEMICOLON
   85 declaration_specifiers: • storage_class_specifier declaration_specifiers
   86                       | • storage_class_specifier
   87                       | • type_specifier declaration_specifiers
   88                       | • type_specifier
   89                       | • type_qualifier declaration_specifiers
   90                       | • type_qualifier
   91                       | • function_specifier declaration_specifiers
   92                       | • function_specifier
   95 init_declarator: declarator •  [SEMICOLON, COMMA]
   96                | declarator • ASSIGN initializer
   97 storage_class_specifier: • EXTERN
   98                        | • STATIC
   99                        | • AUTO
  100                        | • REGISTER
  101 type_specifier: • VOID
  102               | • CHAR
  103               | • SHORT
  104               | • INT
  105               | • LONG
  106               | • FLOAT
  107               | • DOUBLE
  108               | • SIGNED
  109               | • UNSIGNED
  110               | • BOOL
  111               | • COMPLEX
  112               | • IMAGINARY
  113               | • enum_specifier
  118 enum_specifier: • ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | • ENUM CURBRAOPEN enumerator_list CURBRACLOSE
  120               | • ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | • ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | • ENUM IDENTIFIER
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  130 function_specifier: • INLINE
  146 CT: ε •  [CURBRAOPEN]
  207 function_definition: declaration_specifiers declarator • declaration_list CT compound_statement
  208                    | declaration_specifiers declarator • CT compound_statement
  209 declaration_list: • declaration
  210                 | • declaration_list declaration

    AUTO       shift, and go to state 1
    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    EXTERN     shift, and go to state 5
    VOID       shift, and go to state 6
    FLOAT      shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR       shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL       shift, and go to state 13
    STATIC     shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21
    ASSIGN     shift, and go to state 59

    CURBRAOPEN  reduce using rule 146 (CT)
    $default    reduce using rule 95 (init_declarator)

    declaration              go to state 60
    declaration_specifiers   go to state 61
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    CT                       go to state 62
    declaration_list         go to state 63


State 41

  132 declarator: direct_declarator •  [AUTO, ENUM, RESTRICT, UNSIGNED, EXTERN, VOID, FLOAT, SHORT, VOLATILE, CHAR, SIGNED, CONST, BOOL, STATIC, COMPLEX, INLINE, IMAGINARY, INT, DOUBLE, LONG, REGISTER, ROBRACLOSE, CURBRAOPEN, SEMICOLON, ASSIGN, COMMA]
  135 direct_declarator: direct_declarator • SQBRAOPEN type_qualifier_list assignment_expression SQBRACLOSE
  136                  | direct_declarator • SQBRAOPEN type_qualifier_list SQBRACLOSE
  137                  | direct_declarator • SQBRAOPEN assignment_expression SQBRACLOSE
  138                  | direct_declarator • SQBRAOPEN SQBRACLOSE
  139                  | direct_declarator • SQBRAOPEN STATIC type_qualifier_list assignment_expression SQBRACLOSE
  140                  | direct_declarator • SQBRAOPEN STATIC assignment_expression SQBRACLOSE
  141                  | direct_declarator • SQBRAOPEN type_qualifier_list MUL SQBRACLOSE
  142                  | direct_declarator • SQBRAOPEN MUL SQBRACLOSE
  143                  | direct_declarator • ROBRAOPEN CT parameter_type_list ROBRACLOSE
  144                  | direct_declarator • ROBRAOPEN identifier_list ROBRACLOSE
  145                  | direct_declarator • ROBRAOPEN CT ROBRACLOSE

    SQBRAOPEN  shift, and go to state 64
    ROBRAOPEN  shift, and go to state 65

    $default  reduce using rule 132 (declarator)


State 42

  131 declarator: pointer • direct_declarator
  133 direct_declarator: • IDENTIFIER
  134                  | • ROBRAOPEN declarator ROBRACLOSE
  135                  | • direct_declarator SQBRAOPEN type_qualifier_list assignment_expression SQBRACLOSE
  136                  | • direct_declarator SQBRAOPEN type_qualifier_list SQBRACLOSE
  137                  | • direct_declarator SQBRAOPEN assignment_expression SQBRACLOSE
  138                  | • direct_declarator SQBRAOPEN SQBRACLOSE
  139                  | • direct_declarator SQBRAOPEN STATIC type_qualifier_list assignment_expression SQBRACLOSE
  140                  | • direct_declarator SQBRAOPEN STATIC assignment_expression SQBRACLOSE
  141                  | • direct_declarator SQBRAOPEN type_qualifier_list MUL SQBRACLOSE
  142                  | • direct_declarator SQBRAOPEN MUL SQBRACLOSE
  143                  | • direct_declarator ROBRAOPEN CT parameter_type_list ROBRACLOSE
  144                  | • direct_declarator ROBRAOPEN identifier_list ROBRACLOSE
  145                  | • direct_declarator ROBRAOPEN CT ROBRACLOSE

    IDENTIFIER  shift, and go to state 34
    ROBRAOPEN   shift, and go to state 35

    direct_declarator  go to state 66


State 43

   85 declaration_specifiers: storage_class_specifier declaration_specifiers •

    $default  reduce using rule 85 (declaration_specifiers)


State 44

   87 declaration_specifiers: type_specifier declaration_specifiers •

    $default  reduce using rule 87 (declaration_specifiers)


State 45

   89 declaration_specifiers: type_qualifier declaration_specifiers •

    $default  reduce using rule 89 (declaration_specifiers)


State 46

   91 declaration_specifiers: function_specifier declaration_specifiers •

    $default  reduce using rule 91 (declaration_specifiers)


State 47

    0 $accept: translation_unit $end •

    $default  accept


State 48

  204 translation_unit: translation_unit external_declaration •

    $default  reduce using rule 204 (translation_unit)


State 49

  118 enum_specifier: ENUM IDENTIFIER CURBRAOPEN • enumerator_list CURBRACLOSE
  120               | ENUM IDENTIFIER CURBRAOPEN • enumerator_list COMMA CURBRACLOSE
  123 enumerator_list: • enumerator
  124                | • enumerator_list COMMA enumerator
  125 enumerator: • IDENTIFIER
  126           | • IDENTIFIER ASSIGN constant_expression

    IDENTIFIER  shift, and go to state 50

    enumerator_list  go to state 67
    enumerator       go to state 52


State 50

  125 enumerator: IDENTIFIER •  [CURBRACLOSE, COMMA]
  126           | IDENTIFIER • ASSIGN constant_expression

    ASSIGN  shift, and go to state 68

    $default  reduce using rule 125 (enumerator)


State 51

  119 enum_specifier: ENUM CURBRAOPEN enumerator_list • CURBRACLOSE
  121               | ENUM CURBRAOPEN enumerator_list • COMMA CURBRACLOSE
  124 enumerator_list: enumerator_list • COMMA enumerator

    CURBRACLOSE  shift, and go to state 69
    COMMA        shift, and go to state 70


State 52

  123 enumerator_list: enumerator •

    $default  reduce using rule 123 (enumerator_list)


State 53

  134 direct_declarator: ROBRAOPEN declarator • ROBRACLOSE

    ROBRACLOSE  shift, and go to state 71


State 54

  151 type_qualifier_list: type_qualifier •

    $default  reduce using rule 151 (type_qualifier_list)


State 55

  150 pointer: MUL pointer •

    $default  reduce using rule 150 (pointer)


State 56

  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  147 pointer: • MUL type_qualifier_list
  147        | MUL type_qualifier_list •  [IDENTIFIER, ROBRAOPEN]
  148        | • MUL
  149        | • MUL type_qualifier_list pointer
  149        | MUL type_qualifier_list • pointer
  150        | • MUL pointer
  152 type_qualifier_list: type_qualifier_list • type_qualifier

    RESTRICT  shift, and go to state 3
    VOLATILE  shift, and go to state 9
    CONST     shift, and go to state 12
    MUL       shift, and go to state 36

    $default  reduce using rule 147 (pointer)

    type_qualifier  go to state 72
    pointer         go to state 73


State 57

   83 declaration: declaration_specifiers init_declarator_list SEMICOLON •

    $default  reduce using rule 83 (declaration)


State 58

   94 init_declarator_list: init_declarator_list COMMA • init_declarator
   95 init_declarator: • declarator
   96                | • declarator ASSIGN initializer
  131 declarator: • pointer direct_declarator
  132           | • direct_declarator
  133 direct_declarator: • IDENTIFIER
  134                  | • ROBRAOPEN declarator ROBRACLOSE
  135                  | • direct_declarator SQBRAOPEN type_qualifier_list assignment_expression SQBRACLOSE
  136                  | • direct_declarator SQBRAOPEN type_qualifier_list SQBRACLOSE
  137                  | • direct_declarator SQBRAOPEN assignment_expression SQBRACLOSE
  138                  | • direct_declarator SQBRAOPEN SQBRACLOSE
  139                  | • direct_declarator SQBRAOPEN STATIC type_qualifier_list assignment_expression SQBRACLOSE
  140                  | • direct_declarator SQBRAOPEN STATIC assignment_expression SQBRACLOSE
  141                  | • direct_declarator SQBRAOPEN type_qualifier_list MUL SQBRACLOSE
  142                  | • direct_declarator SQBRAOPEN MUL SQBRACLOSE
  143                  | • direct_declarator ROBRAOPEN CT parameter_type_list ROBRACLOSE
  144                  | • direct_declarator ROBRAOPEN identifier_list ROBRACLOSE
  145                  | • direct_declarator ROBRAOPEN CT ROBRACLOSE
  147 pointer: • MUL type_qualifier_list
  148        | • MUL
  149        | • MUL type_qualifier_list pointer
  150        | • MUL pointer

    IDENTIFIER  shift, and go to state 34
    ROBRAOPEN   shift, and go to state 35
    MUL         shift, and go to state 36

    init_declarator    go to state 74
    declarator         go to state 75
    direct_declarator  go to state 41
    pointer            go to state 42


State 59

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   96 init_declarator: declarator ASSIGN • initializer
  162 initializer: • assignment_expression
  163            | • CURBRAOPEN initializer_list CURBRACLOSE
  164            | • CURBRAOPEN initializer_list COMMA CURBRACLOSE

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 84
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 110
    initializer                go to state 111


State 60

  209 declaration_list: declaration •

    $default  reduce using rule 209 (declaration_list)


State 61

   83 declaration: declaration_specifiers • init_declarator_list SEMICOLON
   84            | declaration_specifiers • SEMICOLON
   93 init_declarator_list: • init_declarator
   94                     | • init_declarator_list COMMA init_declarator
   95 init_declarator: • declarator
   96                | • declarator ASSIGN initializer
  131 declarator: • pointer direct_declarator
  132           | • direct_declarator
  133 direct_declarator: • IDENTIFIER
  134                  | • ROBRAOPEN declarator ROBRACLOSE
  135                  | • direct_declarator SQBRAOPEN type_qualifier_list assignment_expression SQBRACLOSE
  136                  | • direct_declarator SQBRAOPEN type_qualifier_list SQBRACLOSE
  137                  | • direct_declarator SQBRAOPEN assignment_expression SQBRACLOSE
  138                  | • direct_declarator SQBRAOPEN SQBRACLOSE
  139                  | • direct_declarator SQBRAOPEN STATIC type_qualifier_list assignment_expression SQBRACLOSE
  140                  | • direct_declarator SQBRAOPEN STATIC assignment_expression SQBRACLOSE
  141                  | • direct_declarator SQBRAOPEN type_qualifier_list MUL SQBRACLOSE
  142                  | • direct_declarator SQBRAOPEN MUL SQBRACLOSE
  143                  | • direct_declarator ROBRAOPEN CT parameter_type_list ROBRACLOSE
  144                  | • direct_declarator ROBRAOPEN identifier_list ROBRACLOSE
  145                  | • direct_declarator ROBRAOPEN CT ROBRACLOSE
  147 pointer: • MUL type_qualifier_list
  148        | • MUL
  149        | • MUL type_qualifier_list pointer
  150        | • MUL pointer

    IDENTIFIER  shift, and go to state 34
    ROBRAOPEN   shift, and go to state 35
    MUL         shift, and go to state 36
    SEMICOLON   shift, and go to state 37

    init_declarator_list  go to state 38
    init_declarator       go to state 39
    declarator            go to state 75
    direct_declarator     go to state 41
    pointer               go to state 42


State 62

  183 compound_statement: • CURBRAOPEN block_item_list CURBRACLOSE
  184                   | • CURBRAOPEN CURBRACLOSE
  208 function_definition: declaration_specifiers declarator CT • compound_statement

    CURBRAOPEN  shift, and go to state 112

    compound_statement  go to state 113


State 63

   83 declaration: • declaration_specifiers init_declarator_list SEMICOLON
   84            | • declaration_specifiers SEMICOLON
   85 declaration_specifiers: • storage_class_specifier declaration_specifiers
   86                       | • storage_class_specifier
   87                       | • type_specifier declaration_specifiers
   88                       | • type_specifier
   89                       | • type_qualifier declaration_specifiers
   90                       | • type_qualifier
   91                       | • function_specifier declaration_specifiers
   92                       | • function_specifier
   97 storage_class_specifier: • EXTERN
   98                        | • STATIC
   99                        | • AUTO
  100                        | • REGISTER
  101 type_specifier: • VOID
  102               | • CHAR
  103               | • SHORT
  104               | • INT
  105               | • LONG
  106               | • FLOAT
  107               | • DOUBLE
  108               | • SIGNED
  109               | • UNSIGNED
  110               | • BOOL
  111               | • COMPLEX
  112               | • IMAGINARY
  113               | • enum_specifier
  118 enum_specifier: • ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | • ENUM CURBRAOPEN enumerator_list CURBRACLOSE
  120               | • ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | • ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | • ENUM IDENTIFIER
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  130 function_specifier: • INLINE
  146 CT: ε •  [CURBRAOPEN]
  207 function_definition: declaration_specifiers declarator declaration_list • CT compound_statement
  210 declaration_list: declaration_list • declaration

    AUTO       shift, and go to state 1
    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    EXTERN     shift, and go to state 5
    VOID       shift, and go to state 6
    FLOAT      shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR       shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL       shift, and go to state 13
    STATIC     shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    $default  reduce using rule 146 (CT)

    declaration              go to state 114
    declaration_specifiers   go to state 61
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    CT                       go to state 115


State 64

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  135 direct_declarator: direct_declarator SQBRAOPEN • type_qualifier_list assignment_expression SQBRACLOSE
  136                  | direct_declarator SQBRAOPEN • type_qualifier_list SQBRACLOSE
  137                  | direct_declarator SQBRAOPEN • assignment_expression SQBRACLOSE
  138                  | direct_declarator SQBRAOPEN • SQBRACLOSE
  139                  | direct_declarator SQBRAOPEN • STATIC type_qualifier_list assignment_expression SQBRACLOSE
  140                  | direct_declarator SQBRAOPEN • STATIC assignment_expression SQBRACLOSE
  141                  | direct_declarator SQBRAOPEN • type_qualifier_list MUL SQBRACLOSE
  142                  | direct_declarator SQBRAOPEN • MUL SQBRACLOSE
  151 type_qualifier_list: • type_qualifier
  152                    | • type_qualifier_list type_qualifier

    RESTRICT              shift, and go to state 3
    VOLATILE              shift, and go to state 9
    CONST                 shift, and go to state 12
    SIZEOF                shift, and go to state 76
    STATIC                shift, and go to state 116
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    SQBRACLOSE            shift, and go to state 117
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 118
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 119
    type_qualifier             go to state 54
    type_qualifier_list        go to state 120


State 65

  143 direct_declarator: direct_declarator ROBRAOPEN • CT parameter_type_list ROBRACLOSE
  144                  | direct_declarator ROBRAOPEN • identifier_list ROBRACLOSE
  145                  | direct_declarator ROBRAOPEN • CT ROBRACLOSE
  146 CT: ε •  [AUTO, ENUM, RESTRICT, UNSIGNED, EXTERN, VOID, FLOAT, SHORT, VOLATILE, CHAR, SIGNED, CONST, BOOL, STATIC, COMPLEX, INLINE, IMAGINARY, INT, DOUBLE, LONG, REGISTER, ROBRACLOSE]
  159 identifier_list: • IDENTIFIER
  160                | • identifier_list COMMA IDENTIFIER

    IDENTIFIER  shift, and go to state 121

    $default  reduce using rule 146 (CT)

    CT               go to state 122
    identifier_list  go to state 123


State 66

  131 declarator: pointer direct_declarator •  [AUTO, ENUM, RESTRICT, UNSIGNED, EXTERN, VOID, FLOAT, SHORT, VOLATILE, CHAR, SIGNED, CONST, BOOL, STATIC, COMPLEX, INLINE, IMAGINARY, INT, DOUBLE, LONG, REGISTER, ROBRACLOSE, CURBRAOPEN, SEMICOLON, ASSIGN, COMMA]
  135 direct_declarator: direct_declarator • SQBRAOPEN type_qualifier_list assignment_expression SQBRACLOSE
  136                  | direct_declarator • SQBRAOPEN type_qualifier_list SQBRACLOSE
  137                  | direct_declarator • SQBRAOPEN assignment_expression SQBRACLOSE
  138                  | direct_declarator • SQBRAOPEN SQBRACLOSE
  139                  | direct_declarator • SQBRAOPEN STATIC type_qualifier_list assignment_expression SQBRACLOSE
  140                  | direct_declarator • SQBRAOPEN STATIC assignment_expression SQBRACLOSE
  141                  | direct_declarator • SQBRAOPEN type_qualifier_list MUL SQBRACLOSE
  142                  | direct_declarator • SQBRAOPEN MUL SQBRACLOSE
  143                  | direct_declarator • ROBRAOPEN CT parameter_type_list ROBRACLOSE
  144                  | direct_declarator • ROBRAOPEN identifier_list ROBRACLOSE
  145                  | direct_declarator • ROBRAOPEN CT ROBRACLOSE

    SQBRAOPEN  shift, and go to state 64
    ROBRAOPEN  shift, and go to state 65

    $default  reduce using rule 131 (declarator)


State 67

  118 enum_specifier: ENUM IDENTIFIER CURBRAOPEN enumerator_list • CURBRACLOSE
  120               | ENUM IDENTIFIER CURBRAOPEN enumerator_list • COMMA CURBRACLOSE
  124 enumerator_list: enumerator_list • COMMA enumerator

    CURBRACLOSE  shift, and go to state 124
    COMMA        shift, and go to state 125


State 68

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   82 constant_expression: • conditional_expression
  126 enumerator: IDENTIFIER ASSIGN • constant_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 127
    constant_expression        go to state 128


State 69

  119 enum_specifier: ENUM CURBRAOPEN enumerator_list CURBRACLOSE •

    $default  reduce using rule 119 (enum_specifier)


State 70

  121 enum_specifier: ENUM CURBRAOPEN enumerator_list COMMA • CURBRACLOSE
  124 enumerator_list: enumerator_list COMMA • enumerator
  125 enumerator: • IDENTIFIER
  126           | • IDENTIFIER ASSIGN constant_expression

    IDENTIFIER   shift, and go to state 50
    CURBRACLOSE  shift, and go to state 129

    enumerator  go to state 130


State 71

  134 direct_declarator: ROBRAOPEN declarator ROBRACLOSE •

    $default  reduce using rule 134 (direct_declarator)


State 72

  152 type_qualifier_list: type_qualifier_list type_qualifier •

    $default  reduce using rule 152 (type_qualifier_list)


State 73

  149 pointer: MUL type_qualifier_list pointer •

    $default  reduce using rule 149 (pointer)


State 74

   94 init_declarator_list: init_declarator_list COMMA init_declarator •

    $default  reduce using rule 94 (init_declarator_list)


State 75

   95 init_declarator: declarator •  [SEMICOLON, COMMA]
   96                | declarator • ASSIGN initializer

    ASSIGN  shift, and go to state 59

    $default  reduce using rule 95 (init_declarator)


State 76

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   25                 | SIZEOF • unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   26                 | SIZEOF • ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 131
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression  go to state 93
    constant            go to state 94
    postfix_expression  go to state 95
    unary_expression    go to state 132
    unary_operator      go to state 97


State 77

    1 primary_expression: IDENTIFIER •

    $default  reduce using rule 1 (primary_expression)


State 78

    5 constant: INTEGER_CONSTANT •

    $default  reduce using rule 5 (constant)


State 79

    6 constant: FLOATING_CONSTANT •

    $default  reduce using rule 6 (constant)


State 80

    8 constant: CHARACTER_CONSTANT •

    $default  reduce using rule 8 (constant)


State 81

    7 constant: ENUMERATION_CONSTANT •

    $default  reduce using rule 7 (constant)


State 82

    3 primary_expression: STRING_LITERAL •

    $default  reduce using rule 3 (primary_expression)


State 83

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    4                   | ROBRAOPEN • expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   17                   | ROBRAOPEN • type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   18                   | ROBRAOPEN • type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   34                | ROBRAOPEN • type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  101 type_specifier: • VOID
  102               | • CHAR
  103               | • SHORT
  104               | • INT
  105               | • LONG
  106               | • FLOAT
  107               | • DOUBLE
  108               | • SIGNED
  109               | • UNSIGNED
  110               | • BOOL
  111               | • COMPLEX
  112               | • IMAGINARY
  113               | • enum_specifier
  114 specifier_qualifier_list: • type_specifier specifier_qualifier_list
  115                         | • type_specifier
  116                         | • type_qualifier specifier_qualifier_list
  117                         | • type_qualifier
  118 enum_specifier: • ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | • ENUM CURBRAOPEN enumerator_list CURBRACLOSE
  120               | • ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | • ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | • ENUM IDENTIFIER
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  161 type_name: • specifier_qualifier_list

    ENUM                  shift, and go to state 2
    RESTRICT              shift, and go to state 3
    UNSIGNED              shift, and go to state 4
    VOID                  shift, and go to state 6
    FLOAT                 shift, and go to state 7
    SHORT                 shift, and go to state 8
    VOLATILE              shift, and go to state 9
    CHAR                  shift, and go to state 10
    SIGNED                shift, and go to state 11
    CONST                 shift, and go to state 12
    SIZEOF                shift, and go to state 76
    BOOL                  shift, and go to state 13
    COMPLEX               shift, and go to state 15
    IMAGINARY             shift, and go to state 17
    INT                   shift, and go to state 18
    DOUBLE                shift, and go to state 19
    LONG                  shift, and go to state 20
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 134
    type_specifier             go to state 135
    specifier_qualifier_list   go to state 136
    enum_specifier             go to state 26
    type_qualifier             go to state 137
    type_name                  go to state 138


State 84

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
  162 initializer: • assignment_expression
  163            | • CURBRAOPEN initializer_list CURBRACLOSE
  163            | CURBRAOPEN • initializer_list CURBRACLOSE
  164            | • CURBRAOPEN initializer_list COMMA CURBRACLOSE
  164            | CURBRAOPEN • initializer_list COMMA CURBRACLOSE
  165 initializer_list: • designation initializer
  166                 | • initializer
  167                 | • initializer_list COMMA designation initializer
  168                 | • initializer_list COMMA initializer
  169 designation: • designator_list ASSIGN
  170 designator_list: • designator
  171                | • designator_list designator
  172 designator: • SQBRAOPEN constant_expression SQBRACLOSE
  173           | • DOT IDENTIFIER

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    SQBRAOPEN             shift, and go to state 139
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 84
    DOT                   shift, and go to state 140
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 110
    initializer                go to state 141
    initializer_list           go to state 142
    designation                go to state 143
    designator_list            go to state 144
    designator                 go to state 145


State 85

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   22                 | INC • unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 146
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression  go to state 93
    constant            go to state 94
    postfix_expression  go to state 95
    unary_expression    go to state 147
    unary_operator      go to state 97


State 86

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   23                 | DEC • unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 146
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression  go to state 93
    constant            go to state 94
    postfix_expression  go to state 95
    unary_expression    go to state 148
    unary_operator      go to state 97


State 87

   27 unary_operator: AMP •

    $default  reduce using rule 27 (unary_operator)


State 88

   28 unary_operator: MUL •

    $default  reduce using rule 28 (unary_operator)


State 89

   29 unary_operator: ADD •

    $default  reduce using rule 29 (unary_operator)


State 90

   30 unary_operator: SUB •

    $default  reduce using rule 30 (unary_operator)


State 91

   31 unary_operator: NEG •

    $default  reduce using rule 31 (unary_operator)


State 92

   32 unary_operator: EXCLAIM •

    $default  reduce using rule 32 (unary_operator)


State 93

    9 postfix_expression: primary_expression •

    $default  reduce using rule 9 (postfix_expression)


State 94

    2 primary_expression: constant •

    $default  reduce using rule 2 (primary_expression)


State 95

   10 postfix_expression: postfix_expression • SQBRAOPEN expression SQBRACLOSE
   11                   | postfix_expression • ROBRAOPEN ROBRACLOSE
   12                   | postfix_expression • ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | postfix_expression • DOT IDENTIFIER
   14                   | postfix_expression • ACC IDENTIFIER
   15                   | postfix_expression • INC
   16                   | postfix_expression • DEC
   21 unary_expression: postfix_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, MUL, ADD, SUB, DIV, MODULO, SHL, SHR, BITSHL, BITSHR, LTE, GTE, EQ, NEQ, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, ASSIGN, STAREQ, DIVEQ, MODEQ, PLUSEQ, MINUSEQ, SHLEQ, SHREQ, BINANDEQ, BINXOREQ, BINOREQ, COMMA]

    SQBRAOPEN  shift, and go to state 149
    ROBRAOPEN  shift, and go to state 150
    DOT        shift, and go to state 151
    ACC        shift, and go to state 152
    INC        shift, and go to state 153
    DEC        shift, and go to state 154

    $default  reduce using rule 21 (unary_expression)


State 96

   33 cast_expression: unary_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, MUL, ADD, SUB, DIV, MODULO, SHL, SHR, BITSHL, BITSHR, LTE, GTE, EQ, NEQ, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]
   68 assignment_expression: unary_expression • assignment_operator assignment_expression
   69 assignment_operator: • ASSIGN
   70                    | • STAREQ
   71                    | • DIVEQ
   72                    | • MODEQ
   73                    | • PLUSEQ
   74                    | • MINUSEQ
   75                    | • SHLEQ
   76                    | • SHREQ
   77                    | • BINANDEQ
   78                    | • BINXOREQ
   79                    | • BINOREQ

    ASSIGN    shift, and go to state 155
    STAREQ    shift, and go to state 156
    DIVEQ     shift, and go to state 157
    MODEQ     shift, and go to state 158
    PLUSEQ    shift, and go to state 159
    MINUSEQ   shift, and go to state 160
    SHLEQ     shift, and go to state 161
    SHREQ     shift, and go to state 162
    BINANDEQ  shift, and go to state 163
    BINXOREQ  shift, and go to state 164
    BINOREQ   shift, and go to state 165

    $default  reduce using rule 33 (cast_expression)

    assignment_operator  go to state 166


State 97

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   24                 | unary_operator • cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression  go to state 93
    constant            go to state 94
    postfix_expression  go to state 95
    unary_expression    go to state 126
    unary_operator      go to state 97
    cast_expression     go to state 167


State 98

   35 multiplicative_expression: cast_expression •

    $default  reduce using rule 35 (multiplicative_expression)


State 99

   36 multiplicative_expression: multiplicative_expression • MUL cast_expression
   37                          | multiplicative_expression • DIV cast_expression
   38                          | multiplicative_expression • MODULO cast_expression
   39 additive_expression: multiplicative_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, ADD, SUB, SHL, SHR, BITSHL, BITSHR, LTE, GTE, EQ, NEQ, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    MUL     shift, and go to state 168
    DIV     shift, and go to state 169
    MODULO  shift, and go to state 170

    $default  reduce using rule 39 (additive_expression)


State 100

   40 additive_expression: additive_expression • ADD multiplicative_expression
   41                    | additive_expression • SUB multiplicative_expression
   42 shift_expression: additive_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, SHL, SHR, BITSHL, BITSHR, LTE, GTE, EQ, NEQ, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    ADD  shift, and go to state 171
    SUB  shift, and go to state 172

    $default  reduce using rule 42 (shift_expression)


State 101

   43 shift_expression: shift_expression • SHL additive_expression
   44                 | shift_expression • SHR additive_expression
   45 relational_expression: shift_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, BITSHL, BITSHR, LTE, GTE, EQ, NEQ, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    SHL  shift, and go to state 173
    SHR  shift, and go to state 174

    $default  reduce using rule 45 (relational_expression)


State 102

   46 relational_expression: relational_expression • BITSHL shift_expression
   47                      | relational_expression • BITSHR shift_expression
   48                      | relational_expression • LTE shift_expression
   49                      | relational_expression • GTE shift_expression
   50 equality_expression: relational_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, EQ, NEQ, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    BITSHL  shift, and go to state 175
    BITSHR  shift, and go to state 176
    LTE     shift, and go to state 177
    GTE     shift, and go to state 178

    $default  reduce using rule 50 (equality_expression)


State 103

   51 equality_expression: equality_expression • EQ relational_expression
   52                    | equality_expression • NEQ relational_expression
   53 AND_expression: equality_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    EQ   shift, and go to state 179
    NEQ  shift, and go to state 180

    $default  reduce using rule 53 (AND_expression)


State 104

   54 AND_expression: AND_expression • AMP equality_expression
   55 exclusive_OR_expression: AND_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    AMP  shift, and go to state 181

    $default  reduce using rule 55 (exclusive_OR_expression)


State 105

   56 exclusive_OR_expression: exclusive_OR_expression • BITXOR AND_expression
   57 inclusive_OR_expression: exclusive_OR_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    BITXOR  shift, and go to state 182

    $default  reduce using rule 57 (inclusive_OR_expression)


State 106

   58 inclusive_OR_expression: inclusive_OR_expression • BITOR exclusive_OR_expression
   59 logical_AND_expression: inclusive_OR_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    BITOR  shift, and go to state 183

    $default  reduce using rule 59 (logical_AND_expression)


State 107

   60 logical_AND_expression: logical_AND_expression • N AND M inclusive_OR_expression
   61 logical_OR_expression: logical_AND_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, OR, QUESTION, COLON, SEMICOLON, COMMA]
   64 N: ε •  [AND]

    AND       reduce using rule 64 (N)
    $default  reduce using rule 61 (logical_OR_expression)

    N  go to state 184


State 108

   62 logical_OR_expression: logical_OR_expression • N OR M logical_AND_expression
   64 N: ε •  [OR, QUESTION]
   65 conditional_expression: logical_OR_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, COLON, SEMICOLON, COMMA]
   66                       | logical_OR_expression • N QUESTION M expression N COLON M conditional_expression

    OR        reduce using rule 64 (N)
    QUESTION  reduce using rule 64 (N)
    $default  reduce using rule 65 (conditional_expression)

    N  go to state 185


State 109

   67 assignment_expression: conditional_expression •

    $default  reduce using rule 67 (assignment_expression)


State 110

  162 initializer: assignment_expression •

    $default  reduce using rule 162 (initializer)


State 111

   96 init_declarator: declarator ASSIGN initializer •

    $default  reduce using rule 96 (init_declarator)


State 112

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
   83 declaration: • declaration_specifiers init_declarator_list SEMICOLON
   84            | • declaration_specifiers SEMICOLON
   85 declaration_specifiers: • storage_class_specifier declaration_specifiers
   86                       | • storage_class_specifier
   87                       | • type_specifier declaration_specifiers
   88                       | • type_specifier
   89                       | • type_qualifier declaration_specifiers
   90                       | • type_qualifier
   91                       | • function_specifier declaration_specifiers
   92                       | • function_specifier
   97 storage_class_specifier: • EXTERN
   98                        | • STATIC
   99                        | • AUTO
  100                        | • REGISTER
  101 type_specifier: • VOID
  102               | • CHAR
  103               | • SHORT
  104               | • INT
  105               | • LONG
  106               | • FLOAT
  107               | • DOUBLE
  108               | • SIGNED
  109               | • UNSIGNED
  110               | • BOOL
  111               | • COMPLEX
  112               | • IMAGINARY
  113               | • enum_specifier
  118 enum_specifier: • ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | • ENUM CURBRAOPEN enumerator_list CURBRACLOSE
  120               | • ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | • ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | • ENUM IDENTIFIER
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  130 function_specifier: • INLINE
  174 statement: • labeled_statement
  175          | • compound_statement
  176          | • expression_statement
  177          | • selection_statement
  178          | • iteration_statement
  179          | • jump_statement
  180 labeled_statement: • IDENTIFIER COLON statement
  181                  | • CASE constant_expression COLON statement
  182                  | • DEFAULT COLON statement
  183 compound_statement: • CURBRAOPEN block_item_list CURBRACLOSE
  183                   | CURBRAOPEN • block_item_list CURBRACLOSE
  184                   | • CURBRAOPEN CURBRACLOSE
  184                   | CURBRAOPEN • CURBRACLOSE
  185 block_item_list: • block_item
  186                | • block_item_list M block_item
  187 block_item: • declaration
  188           | • statement
  189 expression_statement: • expression SEMICOLON
  190                     | • SEMICOLON
  191 selection_statement: • IF ROBRAOPEN expression N ROBRACLOSE M statement N
  192                    | • IF ROBRAOPEN expression N ROBRACLOSE M statement N ELSE M statement
  193                    | • SWITCH ROBRAOPEN expression ROBRACLOSE statement
  194 iteration_statement: • WHILE M ROBRAOPEN expression ROBRACLOSE M statement
  195                    | • DO M statement M WHILE ROBRAOPEN expression ROBRACLOSE SEMICOLON
  196                    | • FOR ROBRAOPEN expression_statement M expression_statement ROBRACLOSE M statement
  197                    | • FOR ROBRAOPEN expression_statement M expression_statement M expression N ROBRACLOSE M statement
  198 jump_statement: • GOTO IDENTIFIER SEMICOLON
  199               | • CONTINUE SEMICOLON
  200               | • BREAK SEMICOLON
  201               | • RETURN expression SEMICOLON
  202               | • RETURN SEMICOLON

    AUTO                  shift, and go to state 1
    ENUM                  shift, and go to state 2
    RESTRICT              shift, and go to state 3
    UNSIGNED              shift, and go to state 4
    BREAK                 shift, and go to state 186
    EXTERN                shift, and go to state 5
    RETURN                shift, and go to state 187
    VOID                  shift, and go to state 6
    CASE                  shift, and go to state 188
    FLOAT                 shift, and go to state 7
    SHORT                 shift, and go to state 8
    VOLATILE              shift, and go to state 9
    CHAR                  shift, and go to state 10
    FOR                   shift, and go to state 189
    SIGNED                shift, and go to state 11
    WHILE                 shift, and go to state 190
    CONST                 shift, and go to state 12
    GOTO                  shift, and go to state 191
    SIZEOF                shift, and go to state 76
    BOOL                  shift, and go to state 13
    CONTINUE              shift, and go to state 192
    IF                    shift, and go to state 193
    STATIC                shift, and go to state 14
    COMPLEX               shift, and go to state 15
    DEFAULT               shift, and go to state 194
    INLINE                shift, and go to state 16
    IMAGINARY             shift, and go to state 17
    DO                    shift, and go to state 195
    INT                   shift, and go to state 18
    SWITCH                shift, and go to state 196
    DOUBLE                shift, and go to state 19
    LONG                  shift, and go to state 20
    REGISTER              shift, and go to state 21
    IDENTIFIER            shift, and go to state 197
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 112
    CURBRACLOSE           shift, and go to state 198
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92
    SEMICOLON             shift, and go to state 199

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 200
    declaration                go to state 201
    declaration_specifiers     go to state 61
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 202
    labeled_statement          go to state 203
    compound_statement         go to state 204
    block_item_list            go to state 205
    block_item                 go to state 206
    expression_statement       go to state 207
    selection_statement        go to state 208
    iteration_statement        go to state 209
    jump_statement             go to state 210


State 113

  208 function_definition: declaration_specifiers declarator CT compound_statement •

    $default  reduce using rule 208 (function_definition)


State 114

  210 declaration_list: declaration_list declaration •

    $default  reduce using rule 210 (declaration_list)


State 115

  183 compound_statement: • CURBRAOPEN block_item_list CURBRACLOSE
  184                   | • CURBRAOPEN CURBRACLOSE
  207 function_definition: declaration_specifiers declarator declaration_list CT • compound_statement

    CURBRAOPEN  shift, and go to state 112

    compound_statement  go to state 211


State 116

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  139 direct_declarator: direct_declarator SQBRAOPEN STATIC • type_qualifier_list assignment_expression SQBRACLOSE
  140                  | direct_declarator SQBRAOPEN STATIC • assignment_expression SQBRACLOSE
  151 type_qualifier_list: • type_qualifier
  152                    | • type_qualifier_list type_qualifier

    RESTRICT              shift, and go to state 3
    VOLATILE              shift, and go to state 9
    CONST                 shift, and go to state 12
    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 212
    type_qualifier             go to state 54
    type_qualifier_list        go to state 213


State 117

  138 direct_declarator: direct_declarator SQBRAOPEN SQBRACLOSE •

    $default  reduce using rule 138 (direct_declarator)


State 118

   28 unary_operator: MUL •  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, ENUMERATION_CONSTANT, STRING_LITERAL, ROBRAOPEN, INC, DEC, AMP, MUL, ADD, SUB, NEG, EXCLAIM]
  142 direct_declarator: direct_declarator SQBRAOPEN MUL • SQBRACLOSE

    SQBRACLOSE  shift, and go to state 214

    $default  reduce using rule 28 (unary_operator)


State 119

  137 direct_declarator: direct_declarator SQBRAOPEN assignment_expression • SQBRACLOSE

    SQBRACLOSE  shift, and go to state 215


State 120

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  135 direct_declarator: direct_declarator SQBRAOPEN type_qualifier_list • assignment_expression SQBRACLOSE
  136                  | direct_declarator SQBRAOPEN type_qualifier_list • SQBRACLOSE
  141                  | direct_declarator SQBRAOPEN type_qualifier_list • MUL SQBRACLOSE
  152 type_qualifier_list: type_qualifier_list • type_qualifier

    RESTRICT              shift, and go to state 3
    VOLATILE              shift, and go to state 9
    CONST                 shift, and go to state 12
    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    SQBRACLOSE            shift, and go to state 216
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 217
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 218
    type_qualifier             go to state 72


State 121

  159 identifier_list: IDENTIFIER •

    $default  reduce using rule 159 (identifier_list)


State 122

   85 declaration_specifiers: • storage_class_specifier declaration_specifiers
   86                       | • storage_class_specifier
   87                       | • type_specifier declaration_specifiers
   88                       | • type_specifier
   89                       | • type_qualifier declaration_specifiers
   90                       | • type_qualifier
   91                       | • function_specifier declaration_specifiers
   92                       | • function_specifier
   97 storage_class_specifier: • EXTERN
   98                        | • STATIC
   99                        | • AUTO
  100                        | • REGISTER
  101 type_specifier: • VOID
  102               | • CHAR
  103               | • SHORT
  104               | • INT
  105               | • LONG
  106               | • FLOAT
  107               | • DOUBLE
  108               | • SIGNED
  109               | • UNSIGNED
  110               | • BOOL
  111               | • COMPLEX
  112               | • IMAGINARY
  113               | • enum_specifier
  118 enum_specifier: • ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | • ENUM CURBRAOPEN enumerator_list CURBRACLOSE
  120               | • ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | • ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | • ENUM IDENTIFIER
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  130 function_specifier: • INLINE
  143 direct_declarator: direct_declarator ROBRAOPEN CT • parameter_type_list ROBRACLOSE
  145                  | direct_declarator ROBRAOPEN CT • ROBRACLOSE
  153 parameter_type_list: • parameter_list
  154                    | • parameter_list COMMA DOTS
  155 parameter_list: • parameter_declaration
  156               | • parameter_list COMMA parameter_declaration
  157 parameter_declaration: • declaration_specifiers declarator
  158                      | • declaration_specifiers

    AUTO        shift, and go to state 1
    ENUM        shift, and go to state 2
    RESTRICT    shift, and go to state 3
    UNSIGNED    shift, and go to state 4
    EXTERN      shift, and go to state 5
    VOID        shift, and go to state 6
    FLOAT       shift, and go to state 7
    SHORT       shift, and go to state 8
    VOLATILE    shift, and go to state 9
    CHAR        shift, and go to state 10
    SIGNED      shift, and go to state 11
    CONST       shift, and go to state 12
    BOOL        shift, and go to state 13
    STATIC      shift, and go to state 14
    COMPLEX     shift, and go to state 15
    INLINE      shift, and go to state 16
    IMAGINARY   shift, and go to state 17
    INT         shift, and go to state 18
    DOUBLE      shift, and go to state 19
    LONG        shift, and go to state 20
    REGISTER    shift, and go to state 21
    ROBRACLOSE  shift, and go to state 219

    declaration_specifiers   go to state 220
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    parameter_type_list      go to state 221
    parameter_list           go to state 222
    parameter_declaration    go to state 223


State 123

  144 direct_declarator: direct_declarator ROBRAOPEN identifier_list • ROBRACLOSE
  160 identifier_list: identifier_list • COMMA IDENTIFIER

    ROBRACLOSE  shift, and go to state 224
    COMMA       shift, and go to state 225


State 124

  118 enum_specifier: ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE •

    $default  reduce using rule 118 (enum_specifier)


State 125

  120 enum_specifier: ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA • CURBRACLOSE
  124 enumerator_list: enumerator_list COMMA • enumerator
  125 enumerator: • IDENTIFIER
  126           | • IDENTIFIER ASSIGN constant_expression

    IDENTIFIER   shift, and go to state 50
    CURBRACLOSE  shift, and go to state 226

    enumerator  go to state 130


State 126

   33 cast_expression: unary_expression •

    $default  reduce using rule 33 (cast_expression)


State 127

   82 constant_expression: conditional_expression •

    $default  reduce using rule 82 (constant_expression)


State 128

  126 enumerator: IDENTIFIER ASSIGN constant_expression •

    $default  reduce using rule 126 (enumerator)


State 129

  121 enum_specifier: ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE •

    $default  reduce using rule 121 (enum_specifier)


State 130

  124 enumerator_list: enumerator_list COMMA enumerator •

    $default  reduce using rule 124 (enumerator_list)


State 131

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    4                   | ROBRAOPEN • expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   17                   | ROBRAOPEN • type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   18                   | ROBRAOPEN • type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   26                 | SIZEOF ROBRAOPEN • type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  101 type_specifier: • VOID
  102               | • CHAR
  103               | • SHORT
  104               | • INT
  105               | • LONG
  106               | • FLOAT
  107               | • DOUBLE
  108               | • SIGNED
  109               | • UNSIGNED
  110               | • BOOL
  111               | • COMPLEX
  112               | • IMAGINARY
  113               | • enum_specifier
  114 specifier_qualifier_list: • type_specifier specifier_qualifier_list
  115                         | • type_specifier
  116                         | • type_qualifier specifier_qualifier_list
  117                         | • type_qualifier
  118 enum_specifier: • ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | • ENUM CURBRAOPEN enumerator_list CURBRACLOSE
  120               | • ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | • ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | • ENUM IDENTIFIER
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  161 type_name: • specifier_qualifier_list

    ENUM                  shift, and go to state 2
    RESTRICT              shift, and go to state 3
    UNSIGNED              shift, and go to state 4
    VOID                  shift, and go to state 6
    FLOAT                 shift, and go to state 7
    SHORT                 shift, and go to state 8
    VOLATILE              shift, and go to state 9
    CHAR                  shift, and go to state 10
    SIGNED                shift, and go to state 11
    CONST                 shift, and go to state 12
    SIZEOF                shift, and go to state 76
    BOOL                  shift, and go to state 13
    COMPLEX               shift, and go to state 15
    IMAGINARY             shift, and go to state 17
    INT                   shift, and go to state 18
    DOUBLE                shift, and go to state 19
    LONG                  shift, and go to state 20
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 134
    type_specifier             go to state 135
    specifier_qualifier_list   go to state 136
    enum_specifier             go to state 26
    type_qualifier             go to state 137
    type_name                  go to state 227


State 132

   25 unary_expression: SIZEOF unary_expression •

    $default  reduce using rule 25 (unary_expression)


State 133

   80 expression: assignment_expression •

    $default  reduce using rule 80 (expression)


State 134

    4 primary_expression: ROBRAOPEN expression • ROBRACLOSE
   81 expression: expression • COMMA assignment_expression

    ROBRACLOSE  shift, and go to state 228
    COMMA       shift, and go to state 229


State 135

  101 type_specifier: • VOID
  102               | • CHAR
  103               | • SHORT
  104               | • INT
  105               | • LONG
  106               | • FLOAT
  107               | • DOUBLE
  108               | • SIGNED
  109               | • UNSIGNED
  110               | • BOOL
  111               | • COMPLEX
  112               | • IMAGINARY
  113               | • enum_specifier
  114 specifier_qualifier_list: • type_specifier specifier_qualifier_list
  114                         | type_specifier • specifier_qualifier_list
  115                         | • type_specifier
  115                         | type_specifier •  [ROBRACLOSE]
  116                         | • type_qualifier specifier_qualifier_list
  117                         | • type_qualifier
  118 enum_specifier: • ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | • ENUM CURBRAOPEN enumerator_list CURBRACLOSE
  120               | • ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | • ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | • ENUM IDENTIFIER
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE

    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    VOID       shift, and go to state 6
    FLOAT      shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR       shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL       shift, and go to state 13
    COMPLEX    shift, and go to state 15
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20

    $default  reduce using rule 115 (specifier_qualifier_list)

    type_specifier            go to state 135
    specifier_qualifier_list  go to state 230
    enum_specifier            go to state 26
    type_qualifier            go to state 137


State 136

  161 type_name: specifier_qualifier_list •

    $default  reduce using rule 161 (type_name)


State 137

  101 type_specifier: • VOID
  102               | • CHAR
  103               | • SHORT
  104               | • INT
  105               | • LONG
  106               | • FLOAT
  107               | • DOUBLE
  108               | • SIGNED
  109               | • UNSIGNED
  110               | • BOOL
  111               | • COMPLEX
  112               | • IMAGINARY
  113               | • enum_specifier
  114 specifier_qualifier_list: • type_specifier specifier_qualifier_list
  115                         | • type_specifier
  116                         | • type_qualifier specifier_qualifier_list
  116                         | type_qualifier • specifier_qualifier_list
  117                         | • type_qualifier
  117                         | type_qualifier •  [ROBRACLOSE]
  118 enum_specifier: • ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | • ENUM CURBRAOPEN enumerator_list CURBRACLOSE
  120               | • ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | • ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | • ENUM IDENTIFIER
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE

    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    VOID       shift, and go to state 6
    FLOAT      shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR       shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL       shift, and go to state 13
    COMPLEX    shift, and go to state 15
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20

    $default  reduce using rule 117 (specifier_qualifier_list)

    type_specifier            go to state 135
    specifier_qualifier_list  go to state 231
    enum_specifier            go to state 26
    type_qualifier            go to state 137


State 138

   17 postfix_expression: ROBRAOPEN type_name • ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | ROBRAOPEN type_name • ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   34 cast_expression: ROBRAOPEN type_name • ROBRACLOSE cast_expression

    ROBRACLOSE  shift, and go to state 232


State 139

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   82 constant_expression: • conditional_expression
  172 designator: SQBRAOPEN • constant_expression SQBRACLOSE

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 127
    constant_expression        go to state 233


State 140

  173 designator: DOT • IDENTIFIER

    IDENTIFIER  shift, and go to state 234


State 141

  166 initializer_list: initializer •

    $default  reduce using rule 166 (initializer_list)


State 142

  163 initializer: CURBRAOPEN initializer_list • CURBRACLOSE
  164            | CURBRAOPEN initializer_list • COMMA CURBRACLOSE
  167 initializer_list: initializer_list • COMMA designation initializer
  168                 | initializer_list • COMMA initializer

    CURBRACLOSE  shift, and go to state 235
    COMMA        shift, and go to state 236


State 143

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
  162 initializer: • assignment_expression
  163            | • CURBRAOPEN initializer_list CURBRACLOSE
  164            | • CURBRAOPEN initializer_list COMMA CURBRACLOSE
  165 initializer_list: designation • initializer

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 84
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 110
    initializer                go to state 237


State 144

  169 designation: designator_list • ASSIGN
  171 designator_list: designator_list • designator
  172 designator: • SQBRAOPEN constant_expression SQBRACLOSE
  173           | • DOT IDENTIFIER

    SQBRAOPEN  shift, and go to state 139
    DOT        shift, and go to state 140
    ASSIGN     shift, and go to state 238

    designator  go to state 239


State 145

  170 designator_list: designator •

    $default  reduce using rule 170 (designator_list)


State 146

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    4                   | ROBRAOPEN • expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   17                   | ROBRAOPEN • type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   18                   | ROBRAOPEN • type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  101 type_specifier: • VOID
  102               | • CHAR
  103               | • SHORT
  104               | • INT
  105               | • LONG
  106               | • FLOAT
  107               | • DOUBLE
  108               | • SIGNED
  109               | • UNSIGNED
  110               | • BOOL
  111               | • COMPLEX
  112               | • IMAGINARY
  113               | • enum_specifier
  114 specifier_qualifier_list: • type_specifier specifier_qualifier_list
  115                         | • type_specifier
  116                         | • type_qualifier specifier_qualifier_list
  117                         | • type_qualifier
  118 enum_specifier: • ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | • ENUM CURBRAOPEN enumerator_list CURBRACLOSE
  120               | • ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | • ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | • ENUM IDENTIFIER
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  161 type_name: • specifier_qualifier_list

    ENUM                  shift, and go to state 2
    RESTRICT              shift, and go to state 3
    UNSIGNED              shift, and go to state 4
    VOID                  shift, and go to state 6
    FLOAT                 shift, and go to state 7
    SHORT                 shift, and go to state 8
    VOLATILE              shift, and go to state 9
    CHAR                  shift, and go to state 10
    SIGNED                shift, and go to state 11
    CONST                 shift, and go to state 12
    SIZEOF                shift, and go to state 76
    BOOL                  shift, and go to state 13
    COMPLEX               shift, and go to state 15
    IMAGINARY             shift, and go to state 17
    INT                   shift, and go to state 18
    DOUBLE                shift, and go to state 19
    LONG                  shift, and go to state 20
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 134
    type_specifier             go to state 135
    specifier_qualifier_list   go to state 136
    enum_specifier             go to state 26
    type_qualifier             go to state 137
    type_name                  go to state 240


State 147

   22 unary_expression: INC unary_expression •

    $default  reduce using rule 22 (unary_expression)


State 148

   23 unary_expression: DEC unary_expression •

    $default  reduce using rule 23 (unary_expression)


State 149

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   10                   | postfix_expression SQBRAOPEN • expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 241


State 150

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   11                   | postfix_expression ROBRAOPEN • ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   12                   | postfix_expression ROBRAOPEN • argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   19 argument_expression_list: • assignment_expression
   20                         | • argument_expression_list COMMA assignment_expression
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    ROBRACLOSE            shift, and go to state 242
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    argument_expression_list   go to state 243
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 244


State 151

   13 postfix_expression: postfix_expression DOT • IDENTIFIER

    IDENTIFIER  shift, and go to state 245


State 152

   14 postfix_expression: postfix_expression ACC • IDENTIFIER

    IDENTIFIER  shift, and go to state 246


State 153

   15 postfix_expression: postfix_expression INC •

    $default  reduce using rule 15 (postfix_expression)


State 154

   16 postfix_expression: postfix_expression DEC •

    $default  reduce using rule 16 (postfix_expression)


State 155

   69 assignment_operator: ASSIGN •

    $default  reduce using rule 69 (assignment_operator)


State 156

   70 assignment_operator: STAREQ •

    $default  reduce using rule 70 (assignment_operator)


State 157

   71 assignment_operator: DIVEQ •

    $default  reduce using rule 71 (assignment_operator)


State 158

   72 assignment_operator: MODEQ •

    $default  reduce using rule 72 (assignment_operator)


State 159

   73 assignment_operator: PLUSEQ •

    $default  reduce using rule 73 (assignment_operator)


State 160

   74 assignment_operator: MINUSEQ •

    $default  reduce using rule 74 (assignment_operator)


State 161

   75 assignment_operator: SHLEQ •

    $default  reduce using rule 75 (assignment_operator)


State 162

   76 assignment_operator: SHREQ •

    $default  reduce using rule 76 (assignment_operator)


State 163

   77 assignment_operator: BINANDEQ •

    $default  reduce using rule 77 (assignment_operator)


State 164

   78 assignment_operator: BINXOREQ •

    $default  reduce using rule 78 (assignment_operator)


State 165

   79 assignment_operator: BINOREQ •

    $default  reduce using rule 79 (assignment_operator)


State 166

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   68                      | unary_expression assignment_operator • assignment_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 247


State 167

   24 unary_expression: unary_operator cast_expression •

    $default  reduce using rule 24 (unary_expression)


State 168

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   36 multiplicative_expression: multiplicative_expression MUL • cast_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression  go to state 93
    constant            go to state 94
    postfix_expression  go to state 95
    unary_expression    go to state 126
    unary_operator      go to state 97
    cast_expression     go to state 248


State 169

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   37 multiplicative_expression: multiplicative_expression DIV • cast_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression  go to state 93
    constant            go to state 94
    postfix_expression  go to state 95
    unary_expression    go to state 126
    unary_operator      go to state 97
    cast_expression     go to state 249


State 170

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   38 multiplicative_expression: multiplicative_expression MODULO • cast_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression  go to state 93
    constant            go to state 94
    postfix_expression  go to state 95
    unary_expression    go to state 126
    unary_operator      go to state 97
    cast_expression     go to state 250


State 171

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   40 additive_expression: additive_expression ADD • multiplicative_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 251


State 172

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   41 additive_expression: additive_expression SUB • multiplicative_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 252


State 173

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   43 shift_expression: shift_expression SHL • additive_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 253


State 174

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   44 shift_expression: shift_expression SHR • additive_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 254


State 175

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   46 relational_expression: relational_expression BITSHL • shift_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 255


State 176

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   47 relational_expression: relational_expression BITSHR • shift_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 256


State 177

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   48 relational_expression: relational_expression LTE • shift_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 257


State 178

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   49 relational_expression: relational_expression GTE • shift_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 258


State 179

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   51 equality_expression: equality_expression EQ • relational_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 259


State 180

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   52 equality_expression: equality_expression NEQ • relational_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 260


State 181

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   54 AND_expression: AND_expression AMP • equality_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 261


State 182

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   56 exclusive_OR_expression: exclusive_OR_expression BITXOR • AND_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 262


State 183

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   58 inclusive_OR_expression: inclusive_OR_expression BITOR • exclusive_OR_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 263


State 184

   60 logical_AND_expression: logical_AND_expression N • AND M inclusive_OR_expression

    AND  shift, and go to state 264


State 185

   62 logical_OR_expression: logical_OR_expression N • OR M logical_AND_expression
   66 conditional_expression: logical_OR_expression N • QUESTION M expression N COLON M conditional_expression

    OR        shift, and go to state 265
    QUESTION  shift, and go to state 266


State 186

  200 jump_statement: BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 267


State 187

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  201 jump_statement: RETURN • expression SEMICOLON
  202               | RETURN • SEMICOLON

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92
    SEMICOLON             shift, and go to state 268

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 269


State 188

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   82 constant_expression: • conditional_expression
  181 labeled_statement: CASE • constant_expression COLON statement

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 127
    constant_expression        go to state 270


State 189

  196 iteration_statement: FOR • ROBRAOPEN expression_statement M expression_statement ROBRACLOSE M statement
  197                    | FOR • ROBRAOPEN expression_statement M expression_statement M expression N ROBRACLOSE M statement

    ROBRAOPEN  shift, and go to state 271


State 190

   63 M: ε •
  194 iteration_statement: WHILE • M ROBRAOPEN expression ROBRACLOSE M statement

    $default  reduce using rule 63 (M)

    M  go to state 272


State 191

  198 jump_statement: GOTO • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 273


State 192

  199 jump_statement: CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 274


State 193

  191 selection_statement: IF • ROBRAOPEN expression N ROBRACLOSE M statement N
  192                    | IF • ROBRAOPEN expression N ROBRACLOSE M statement N ELSE M statement

    ROBRAOPEN  shift, and go to state 275


State 194

  182 labeled_statement: DEFAULT • COLON statement

    COLON  shift, and go to state 276


State 195

   63 M: ε •
  195 iteration_statement: DO • M statement M WHILE ROBRAOPEN expression ROBRACLOSE SEMICOLON

    $default  reduce using rule 63 (M)

    M  go to state 277


State 196

  193 selection_statement: SWITCH • ROBRAOPEN expression ROBRACLOSE statement

    ROBRAOPEN  shift, and go to state 278


State 197

    1 primary_expression: IDENTIFIER •  [SQBRAOPEN, ROBRAOPEN, DOT, ACC, INC, DEC, AMP, MUL, ADD, SUB, DIV, MODULO, SHL, SHR, BITSHL, BITSHR, LTE, GTE, EQ, NEQ, BITXOR, BITOR, AND, OR, QUESTION, SEMICOLON, ASSIGN, STAREQ, DIVEQ, MODEQ, PLUSEQ, MINUSEQ, SHLEQ, SHREQ, BINANDEQ, BINXOREQ, BINOREQ, COMMA]
  180 labeled_statement: IDENTIFIER • COLON statement

    COLON  shift, and go to state 279

    $default  reduce using rule 1 (primary_expression)


State 198

  184 compound_statement: CURBRAOPEN CURBRACLOSE •

    $default  reduce using rule 184 (compound_statement)


State 199

  190 expression_statement: SEMICOLON •

    $default  reduce using rule 190 (expression_statement)


State 200

   81 expression: expression • COMMA assignment_expression
  189 expression_statement: expression • SEMICOLON

    SEMICOLON  shift, and go to state 280
    COMMA      shift, and go to state 229


State 201

  187 block_item: declaration •

    $default  reduce using rule 187 (block_item)


State 202

  188 block_item: statement •

    $default  reduce using rule 188 (block_item)


State 203

  174 statement: labeled_statement •

    $default  reduce using rule 174 (statement)


State 204

  175 statement: compound_statement •

    $default  reduce using rule 175 (statement)


State 205

   63 M: ε •  [AUTO, ENUM, RESTRICT, UNSIGNED, BREAK, EXTERN, RETURN, VOID, CASE, FLOAT, SHORT, VOLATILE, CHAR, FOR, SIGNED, WHILE, CONST, GOTO, SIZEOF, BOOL, CONTINUE, IF, STATIC, COMPLEX, DEFAULT, INLINE, IMAGINARY, DO, INT, SWITCH, DOUBLE, LONG, REGISTER, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, ENUMERATION_CONSTANT, STRING_LITERAL, ROBRAOPEN, CURBRAOPEN, INC, DEC, AMP, MUL, ADD, SUB, NEG, EXCLAIM, SEMICOLON]
  183 compound_statement: CURBRAOPEN block_item_list • CURBRACLOSE
  186 block_item_list: block_item_list • M block_item

    CURBRACLOSE  shift, and go to state 281

    $default  reduce using rule 63 (M)

    M  go to state 282


State 206

  185 block_item_list: block_item •

    $default  reduce using rule 185 (block_item_list)


State 207

  176 statement: expression_statement •

    $default  reduce using rule 176 (statement)


State 208

  177 statement: selection_statement •

    $default  reduce using rule 177 (statement)


State 209

  178 statement: iteration_statement •

    $default  reduce using rule 178 (statement)


State 210

  179 statement: jump_statement •

    $default  reduce using rule 179 (statement)


State 211

  207 function_definition: declaration_specifiers declarator declaration_list CT compound_statement •

    $default  reduce using rule 207 (function_definition)


State 212

  140 direct_declarator: direct_declarator SQBRAOPEN STATIC assignment_expression • SQBRACLOSE

    SQBRACLOSE  shift, and go to state 283


State 213

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  139 direct_declarator: direct_declarator SQBRAOPEN STATIC type_qualifier_list • assignment_expression SQBRACLOSE
  152 type_qualifier_list: type_qualifier_list • type_qualifier

    RESTRICT              shift, and go to state 3
    VOLATILE              shift, and go to state 9
    CONST                 shift, and go to state 12
    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 284
    type_qualifier             go to state 72


State 214

  142 direct_declarator: direct_declarator SQBRAOPEN MUL SQBRACLOSE •

    $default  reduce using rule 142 (direct_declarator)


State 215

  137 direct_declarator: direct_declarator SQBRAOPEN assignment_expression SQBRACLOSE •

    $default  reduce using rule 137 (direct_declarator)


State 216

  136 direct_declarator: direct_declarator SQBRAOPEN type_qualifier_list SQBRACLOSE •

    $default  reduce using rule 136 (direct_declarator)


State 217

   28 unary_operator: MUL •  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, ENUMERATION_CONSTANT, STRING_LITERAL, ROBRAOPEN, INC, DEC, AMP, MUL, ADD, SUB, NEG, EXCLAIM]
  141 direct_declarator: direct_declarator SQBRAOPEN type_qualifier_list MUL • SQBRACLOSE

    SQBRACLOSE  shift, and go to state 285

    $default  reduce using rule 28 (unary_operator)


State 218

  135 direct_declarator: direct_declarator SQBRAOPEN type_qualifier_list assignment_expression • SQBRACLOSE

    SQBRACLOSE  shift, and go to state 286


State 219

  145 direct_declarator: direct_declarator ROBRAOPEN CT ROBRACLOSE •

    $default  reduce using rule 145 (direct_declarator)


State 220

  131 declarator: • pointer direct_declarator
  132           | • direct_declarator
  133 direct_declarator: • IDENTIFIER
  134                  | • ROBRAOPEN declarator ROBRACLOSE
  135                  | • direct_declarator SQBRAOPEN type_qualifier_list assignment_expression SQBRACLOSE
  136                  | • direct_declarator SQBRAOPEN type_qualifier_list SQBRACLOSE
  137                  | • direct_declarator SQBRAOPEN assignment_expression SQBRACLOSE
  138                  | • direct_declarator SQBRAOPEN SQBRACLOSE
  139                  | • direct_declarator SQBRAOPEN STATIC type_qualifier_list assignment_expression SQBRACLOSE
  140                  | • direct_declarator SQBRAOPEN STATIC assignment_expression SQBRACLOSE
  141                  | • direct_declarator SQBRAOPEN type_qualifier_list MUL SQBRACLOSE
  142                  | • direct_declarator SQBRAOPEN MUL SQBRACLOSE
  143                  | • direct_declarator ROBRAOPEN CT parameter_type_list ROBRACLOSE
  144                  | • direct_declarator ROBRAOPEN identifier_list ROBRACLOSE
  145                  | • direct_declarator ROBRAOPEN CT ROBRACLOSE
  147 pointer: • MUL type_qualifier_list
  148        | • MUL
  149        | • MUL type_qualifier_list pointer
  150        | • MUL pointer
  157 parameter_declaration: declaration_specifiers • declarator
  158                      | declaration_specifiers •  [ROBRACLOSE, COMMA]

    IDENTIFIER  shift, and go to state 34
    ROBRAOPEN   shift, and go to state 35
    MUL         shift, and go to state 36

    $default  reduce using rule 158 (parameter_declaration)

    declarator         go to state 287
    direct_declarator  go to state 41
    pointer            go to state 42


State 221

  143 direct_declarator: direct_declarator ROBRAOPEN CT parameter_type_list • ROBRACLOSE

    ROBRACLOSE  shift, and go to state 288


State 222

  153 parameter_type_list: parameter_list •  [ROBRACLOSE]
  154                    | parameter_list • COMMA DOTS
  156 parameter_list: parameter_list • COMMA parameter_declaration

    COMMA  shift, and go to state 289

    $default  reduce using rule 153 (parameter_type_list)


State 223

  155 parameter_list: parameter_declaration •

    $default  reduce using rule 155 (parameter_list)


State 224

  144 direct_declarator: direct_declarator ROBRAOPEN identifier_list ROBRACLOSE •

    $default  reduce using rule 144 (direct_declarator)


State 225

  160 identifier_list: identifier_list COMMA • IDENTIFIER

    IDENTIFIER  shift, and go to state 290


State 226

  120 enum_specifier: ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE •

    $default  reduce using rule 120 (enum_specifier)


State 227

   17 postfix_expression: ROBRAOPEN type_name • ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | ROBRAOPEN type_name • ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   26 unary_expression: SIZEOF ROBRAOPEN type_name • ROBRACLOSE

    ROBRACLOSE  shift, and go to state 291


State 228

    4 primary_expression: ROBRAOPEN expression ROBRACLOSE •

    $default  reduce using rule 4 (primary_expression)


State 229

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   81 expression: expression COMMA • assignment_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 292


State 230

  114 specifier_qualifier_list: type_specifier specifier_qualifier_list •

    $default  reduce using rule 114 (specifier_qualifier_list)


State 231

  116 specifier_qualifier_list: type_qualifier specifier_qualifier_list •

    $default  reduce using rule 116 (specifier_qualifier_list)


State 232

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   17                   | ROBRAOPEN type_name ROBRACLOSE • CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   18                   | ROBRAOPEN type_name ROBRACLOSE • CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   34                | ROBRAOPEN type_name ROBRACLOSE • cast_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 293
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression  go to state 93
    constant            go to state 94
    postfix_expression  go to state 95
    unary_expression    go to state 126
    unary_operator      go to state 97
    cast_expression     go to state 294


State 233

  172 designator: SQBRAOPEN constant_expression • SQBRACLOSE

    SQBRACLOSE  shift, and go to state 295


State 234

  173 designator: DOT IDENTIFIER •

    $default  reduce using rule 173 (designator)


State 235

  163 initializer: CURBRAOPEN initializer_list CURBRACLOSE •

    $default  reduce using rule 163 (initializer)


State 236

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
  162 initializer: • assignment_expression
  163            | • CURBRAOPEN initializer_list CURBRACLOSE
  164            | • CURBRAOPEN initializer_list COMMA CURBRACLOSE
  164            | CURBRAOPEN initializer_list COMMA • CURBRACLOSE
  167 initializer_list: initializer_list COMMA • designation initializer
  168                 | initializer_list COMMA • initializer
  169 designation: • designator_list ASSIGN
  170 designator_list: • designator
  171                | • designator_list designator
  172 designator: • SQBRAOPEN constant_expression SQBRACLOSE
  173           | • DOT IDENTIFIER

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    SQBRAOPEN             shift, and go to state 139
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 84
    CURBRACLOSE           shift, and go to state 296
    DOT                   shift, and go to state 140
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 110
    initializer                go to state 297
    designation                go to state 298
    designator_list            go to state 144
    designator                 go to state 145


State 237

  165 initializer_list: designation initializer •

    $default  reduce using rule 165 (initializer_list)


State 238

  169 designation: designator_list ASSIGN •

    $default  reduce using rule 169 (designation)


State 239

  171 designator_list: designator_list designator •

    $default  reduce using rule 171 (designator_list)


State 240

   17 postfix_expression: ROBRAOPEN type_name • ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | ROBRAOPEN type_name • ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE

    ROBRACLOSE  shift, and go to state 299


State 241

   10 postfix_expression: postfix_expression SQBRAOPEN expression • SQBRACLOSE
   81 expression: expression • COMMA assignment_expression

    SQBRACLOSE  shift, and go to state 300
    COMMA       shift, and go to state 229


State 242

   11 postfix_expression: postfix_expression ROBRAOPEN ROBRACLOSE •

    $default  reduce using rule 11 (postfix_expression)


State 243

   12 postfix_expression: postfix_expression ROBRAOPEN argument_expression_list • ROBRACLOSE
   20 argument_expression_list: argument_expression_list • COMMA assignment_expression

    ROBRACLOSE  shift, and go to state 301
    COMMA       shift, and go to state 302


State 244

   19 argument_expression_list: assignment_expression •

    $default  reduce using rule 19 (argument_expression_list)


State 245

   13 postfix_expression: postfix_expression DOT IDENTIFIER •

    $default  reduce using rule 13 (postfix_expression)


State 246

   14 postfix_expression: postfix_expression ACC IDENTIFIER •

    $default  reduce using rule 14 (postfix_expression)


State 247

   68 assignment_expression: unary_expression assignment_operator assignment_expression •

    $default  reduce using rule 68 (assignment_expression)


State 248

   36 multiplicative_expression: multiplicative_expression MUL cast_expression •

    $default  reduce using rule 36 (multiplicative_expression)


State 249

   37 multiplicative_expression: multiplicative_expression DIV cast_expression •

    $default  reduce using rule 37 (multiplicative_expression)


State 250

   38 multiplicative_expression: multiplicative_expression MODULO cast_expression •

    $default  reduce using rule 38 (multiplicative_expression)


State 251

   36 multiplicative_expression: multiplicative_expression • MUL cast_expression
   37                          | multiplicative_expression • DIV cast_expression
   38                          | multiplicative_expression • MODULO cast_expression
   40 additive_expression: additive_expression ADD multiplicative_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, ADD, SUB, SHL, SHR, BITSHL, BITSHR, LTE, GTE, EQ, NEQ, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    MUL     shift, and go to state 168
    DIV     shift, and go to state 169
    MODULO  shift, and go to state 170

    $default  reduce using rule 40 (additive_expression)


State 252

   36 multiplicative_expression: multiplicative_expression • MUL cast_expression
   37                          | multiplicative_expression • DIV cast_expression
   38                          | multiplicative_expression • MODULO cast_expression
   41 additive_expression: additive_expression SUB multiplicative_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, ADD, SUB, SHL, SHR, BITSHL, BITSHR, LTE, GTE, EQ, NEQ, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    MUL     shift, and go to state 168
    DIV     shift, and go to state 169
    MODULO  shift, and go to state 170

    $default  reduce using rule 41 (additive_expression)


State 253

   40 additive_expression: additive_expression • ADD multiplicative_expression
   41                    | additive_expression • SUB multiplicative_expression
   43 shift_expression: shift_expression SHL additive_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, SHL, SHR, BITSHL, BITSHR, LTE, GTE, EQ, NEQ, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    ADD  shift, and go to state 171
    SUB  shift, and go to state 172

    $default  reduce using rule 43 (shift_expression)


State 254

   40 additive_expression: additive_expression • ADD multiplicative_expression
   41                    | additive_expression • SUB multiplicative_expression
   44 shift_expression: shift_expression SHR additive_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, SHL, SHR, BITSHL, BITSHR, LTE, GTE, EQ, NEQ, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    ADD  shift, and go to state 171
    SUB  shift, and go to state 172

    $default  reduce using rule 44 (shift_expression)


State 255

   43 shift_expression: shift_expression • SHL additive_expression
   44                 | shift_expression • SHR additive_expression
   46 relational_expression: relational_expression BITSHL shift_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, BITSHL, BITSHR, LTE, GTE, EQ, NEQ, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    SHL  shift, and go to state 173
    SHR  shift, and go to state 174

    $default  reduce using rule 46 (relational_expression)


State 256

   43 shift_expression: shift_expression • SHL additive_expression
   44                 | shift_expression • SHR additive_expression
   47 relational_expression: relational_expression BITSHR shift_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, BITSHL, BITSHR, LTE, GTE, EQ, NEQ, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    SHL  shift, and go to state 173
    SHR  shift, and go to state 174

    $default  reduce using rule 47 (relational_expression)


State 257

   43 shift_expression: shift_expression • SHL additive_expression
   44                 | shift_expression • SHR additive_expression
   48 relational_expression: relational_expression LTE shift_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, BITSHL, BITSHR, LTE, GTE, EQ, NEQ, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    SHL  shift, and go to state 173
    SHR  shift, and go to state 174

    $default  reduce using rule 48 (relational_expression)


State 258

   43 shift_expression: shift_expression • SHL additive_expression
   44                 | shift_expression • SHR additive_expression
   49 relational_expression: relational_expression GTE shift_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, BITSHL, BITSHR, LTE, GTE, EQ, NEQ, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    SHL  shift, and go to state 173
    SHR  shift, and go to state 174

    $default  reduce using rule 49 (relational_expression)


State 259

   46 relational_expression: relational_expression • BITSHL shift_expression
   47                      | relational_expression • BITSHR shift_expression
   48                      | relational_expression • LTE shift_expression
   49                      | relational_expression • GTE shift_expression
   51 equality_expression: equality_expression EQ relational_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, EQ, NEQ, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    BITSHL  shift, and go to state 175
    BITSHR  shift, and go to state 176
    LTE     shift, and go to state 177
    GTE     shift, and go to state 178

    $default  reduce using rule 51 (equality_expression)


State 260

   46 relational_expression: relational_expression • BITSHL shift_expression
   47                      | relational_expression • BITSHR shift_expression
   48                      | relational_expression • LTE shift_expression
   49                      | relational_expression • GTE shift_expression
   52 equality_expression: equality_expression NEQ relational_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, EQ, NEQ, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    BITSHL  shift, and go to state 175
    BITSHR  shift, and go to state 176
    LTE     shift, and go to state 177
    GTE     shift, and go to state 178

    $default  reduce using rule 52 (equality_expression)


State 261

   51 equality_expression: equality_expression • EQ relational_expression
   52                    | equality_expression • NEQ relational_expression
   54 AND_expression: AND_expression AMP equality_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    EQ   shift, and go to state 179
    NEQ  shift, and go to state 180

    $default  reduce using rule 54 (AND_expression)


State 262

   54 AND_expression: AND_expression • AMP equality_expression
   56 exclusive_OR_expression: exclusive_OR_expression BITXOR AND_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    AMP  shift, and go to state 181

    $default  reduce using rule 56 (exclusive_OR_expression)


State 263

   56 exclusive_OR_expression: exclusive_OR_expression • BITXOR AND_expression
   58 inclusive_OR_expression: inclusive_OR_expression BITOR exclusive_OR_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    BITXOR  shift, and go to state 182

    $default  reduce using rule 58 (inclusive_OR_expression)


State 264

   60 logical_AND_expression: logical_AND_expression N AND • M inclusive_OR_expression
   63 M: ε •

    $default  reduce using rule 63 (M)

    M  go to state 303


State 265

   62 logical_OR_expression: logical_OR_expression N OR • M logical_AND_expression
   63 M: ε •

    $default  reduce using rule 63 (M)

    M  go to state 304


State 266

   63 M: ε •
   66 conditional_expression: logical_OR_expression N QUESTION • M expression N COLON M conditional_expression

    $default  reduce using rule 63 (M)

    M  go to state 305


State 267

  200 jump_statement: BREAK SEMICOLON •

    $default  reduce using rule 200 (jump_statement)


State 268

  202 jump_statement: RETURN SEMICOLON •

    $default  reduce using rule 202 (jump_statement)


State 269

   81 expression: expression • COMMA assignment_expression
  201 jump_statement: RETURN expression • SEMICOLON

    SEMICOLON  shift, and go to state 306
    COMMA      shift, and go to state 229


State 270

  181 labeled_statement: CASE constant_expression • COLON statement

    COLON  shift, and go to state 307


State 271

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  189 expression_statement: • expression SEMICOLON
  190                     | • SEMICOLON
  196 iteration_statement: FOR ROBRAOPEN • expression_statement M expression_statement ROBRACLOSE M statement
  197                    | FOR ROBRAOPEN • expression_statement M expression_statement M expression N ROBRACLOSE M statement

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92
    SEMICOLON             shift, and go to state 199

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 200
    expression_statement       go to state 308


State 272

  194 iteration_statement: WHILE M • ROBRAOPEN expression ROBRACLOSE M statement

    ROBRAOPEN  shift, and go to state 309


State 273

  198 jump_statement: GOTO IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 310


State 274

  199 jump_statement: CONTINUE SEMICOLON •

    $default  reduce using rule 199 (jump_statement)


State 275

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  191 selection_statement: IF ROBRAOPEN • expression N ROBRACLOSE M statement N
  192                    | IF ROBRAOPEN • expression N ROBRACLOSE M statement N ELSE M statement

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 311


State 276

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  174 statement: • labeled_statement
  175          | • compound_statement
  176          | • expression_statement
  177          | • selection_statement
  178          | • iteration_statement
  179          | • jump_statement
  180 labeled_statement: • IDENTIFIER COLON statement
  181                  | • CASE constant_expression COLON statement
  182                  | • DEFAULT COLON statement
  182                  | DEFAULT COLON • statement
  183 compound_statement: • CURBRAOPEN block_item_list CURBRACLOSE
  184                   | • CURBRAOPEN CURBRACLOSE
  189 expression_statement: • expression SEMICOLON
  190                     | • SEMICOLON
  191 selection_statement: • IF ROBRAOPEN expression N ROBRACLOSE M statement N
  192                    | • IF ROBRAOPEN expression N ROBRACLOSE M statement N ELSE M statement
  193                    | • SWITCH ROBRAOPEN expression ROBRACLOSE statement
  194 iteration_statement: • WHILE M ROBRAOPEN expression ROBRACLOSE M statement
  195                    | • DO M statement M WHILE ROBRAOPEN expression ROBRACLOSE SEMICOLON
  196                    | • FOR ROBRAOPEN expression_statement M expression_statement ROBRACLOSE M statement
  197                    | • FOR ROBRAOPEN expression_statement M expression_statement M expression N ROBRACLOSE M statement
  198 jump_statement: • GOTO IDENTIFIER SEMICOLON
  199               | • CONTINUE SEMICOLON
  200               | • BREAK SEMICOLON
  201               | • RETURN expression SEMICOLON
  202               | • RETURN SEMICOLON

    BREAK                 shift, and go to state 186
    RETURN                shift, and go to state 187
    CASE                  shift, and go to state 188
    FOR                   shift, and go to state 189
    WHILE                 shift, and go to state 190
    GOTO                  shift, and go to state 191
    SIZEOF                shift, and go to state 76
    CONTINUE              shift, and go to state 192
    IF                    shift, and go to state 193
    DEFAULT               shift, and go to state 194
    DO                    shift, and go to state 195
    SWITCH                shift, and go to state 196
    IDENTIFIER            shift, and go to state 197
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 112
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92
    SEMICOLON             shift, and go to state 199

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 200
    statement                  go to state 312
    labeled_statement          go to state 203
    compound_statement         go to state 204
    expression_statement       go to state 207
    selection_statement        go to state 208
    iteration_statement        go to state 209
    jump_statement             go to state 210


State 277

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  174 statement: • labeled_statement
  175          | • compound_statement
  176          | • expression_statement
  177          | • selection_statement
  178          | • iteration_statement
  179          | • jump_statement
  180 labeled_statement: • IDENTIFIER COLON statement
  181                  | • CASE constant_expression COLON statement
  182                  | • DEFAULT COLON statement
  183 compound_statement: • CURBRAOPEN block_item_list CURBRACLOSE
  184                   | • CURBRAOPEN CURBRACLOSE
  189 expression_statement: • expression SEMICOLON
  190                     | • SEMICOLON
  191 selection_statement: • IF ROBRAOPEN expression N ROBRACLOSE M statement N
  192                    | • IF ROBRAOPEN expression N ROBRACLOSE M statement N ELSE M statement
  193                    | • SWITCH ROBRAOPEN expression ROBRACLOSE statement
  194 iteration_statement: • WHILE M ROBRAOPEN expression ROBRACLOSE M statement
  195                    | • DO M statement M WHILE ROBRAOPEN expression ROBRACLOSE SEMICOLON
  195                    | DO M • statement M WHILE ROBRAOPEN expression ROBRACLOSE SEMICOLON
  196                    | • FOR ROBRAOPEN expression_statement M expression_statement ROBRACLOSE M statement
  197                    | • FOR ROBRAOPEN expression_statement M expression_statement M expression N ROBRACLOSE M statement
  198 jump_statement: • GOTO IDENTIFIER SEMICOLON
  199               | • CONTINUE SEMICOLON
  200               | • BREAK SEMICOLON
  201               | • RETURN expression SEMICOLON
  202               | • RETURN SEMICOLON

    BREAK                 shift, and go to state 186
    RETURN                shift, and go to state 187
    CASE                  shift, and go to state 188
    FOR                   shift, and go to state 189
    WHILE                 shift, and go to state 190
    GOTO                  shift, and go to state 191
    SIZEOF                shift, and go to state 76
    CONTINUE              shift, and go to state 192
    IF                    shift, and go to state 193
    DEFAULT               shift, and go to state 194
    DO                    shift, and go to state 195
    SWITCH                shift, and go to state 196
    IDENTIFIER            shift, and go to state 197
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 112
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92
    SEMICOLON             shift, and go to state 199

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 200
    statement                  go to state 313
    labeled_statement          go to state 203
    compound_statement         go to state 204
    expression_statement       go to state 207
    selection_statement        go to state 208
    iteration_statement        go to state 209
    jump_statement             go to state 210


State 278

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  193 selection_statement: SWITCH ROBRAOPEN • expression ROBRACLOSE statement

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 314


State 279

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  174 statement: • labeled_statement
  175          | • compound_statement
  176          | • expression_statement
  177          | • selection_statement
  178          | • iteration_statement
  179          | • jump_statement
  180 labeled_statement: • IDENTIFIER COLON statement
  180                  | IDENTIFIER COLON • statement
  181                  | • CASE constant_expression COLON statement
  182                  | • DEFAULT COLON statement
  183 compound_statement: • CURBRAOPEN block_item_list CURBRACLOSE
  184                   | • CURBRAOPEN CURBRACLOSE
  189 expression_statement: • expression SEMICOLON
  190                     | • SEMICOLON
  191 selection_statement: • IF ROBRAOPEN expression N ROBRACLOSE M statement N
  192                    | • IF ROBRAOPEN expression N ROBRACLOSE M statement N ELSE M statement
  193                    | • SWITCH ROBRAOPEN expression ROBRACLOSE statement
  194 iteration_statement: • WHILE M ROBRAOPEN expression ROBRACLOSE M statement
  195                    | • DO M statement M WHILE ROBRAOPEN expression ROBRACLOSE SEMICOLON
  196                    | • FOR ROBRAOPEN expression_statement M expression_statement ROBRACLOSE M statement
  197                    | • FOR ROBRAOPEN expression_statement M expression_statement M expression N ROBRACLOSE M statement
  198 jump_statement: • GOTO IDENTIFIER SEMICOLON
  199               | • CONTINUE SEMICOLON
  200               | • BREAK SEMICOLON
  201               | • RETURN expression SEMICOLON
  202               | • RETURN SEMICOLON

    BREAK                 shift, and go to state 186
    RETURN                shift, and go to state 187
    CASE                  shift, and go to state 188
    FOR                   shift, and go to state 189
    WHILE                 shift, and go to state 190
    GOTO                  shift, and go to state 191
    SIZEOF                shift, and go to state 76
    CONTINUE              shift, and go to state 192
    IF                    shift, and go to state 193
    DEFAULT               shift, and go to state 194
    DO                    shift, and go to state 195
    SWITCH                shift, and go to state 196
    IDENTIFIER            shift, and go to state 197
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 112
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92
    SEMICOLON             shift, and go to state 199

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 200
    statement                  go to state 315
    labeled_statement          go to state 203
    compound_statement         go to state 204
    expression_statement       go to state 207
    selection_statement        go to state 208
    iteration_statement        go to state 209
    jump_statement             go to state 210


State 280

  189 expression_statement: expression SEMICOLON •

    $default  reduce using rule 189 (expression_statement)


State 281

  183 compound_statement: CURBRAOPEN block_item_list CURBRACLOSE •

    $default  reduce using rule 183 (compound_statement)


State 282

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
   83 declaration: • declaration_specifiers init_declarator_list SEMICOLON
   84            | • declaration_specifiers SEMICOLON
   85 declaration_specifiers: • storage_class_specifier declaration_specifiers
   86                       | • storage_class_specifier
   87                       | • type_specifier declaration_specifiers
   88                       | • type_specifier
   89                       | • type_qualifier declaration_specifiers
   90                       | • type_qualifier
   91                       | • function_specifier declaration_specifiers
   92                       | • function_specifier
   97 storage_class_specifier: • EXTERN
   98                        | • STATIC
   99                        | • AUTO
  100                        | • REGISTER
  101 type_specifier: • VOID
  102               | • CHAR
  103               | • SHORT
  104               | • INT
  105               | • LONG
  106               | • FLOAT
  107               | • DOUBLE
  108               | • SIGNED
  109               | • UNSIGNED
  110               | • BOOL
  111               | • COMPLEX
  112               | • IMAGINARY
  113               | • enum_specifier
  118 enum_specifier: • ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | • ENUM CURBRAOPEN enumerator_list CURBRACLOSE
  120               | • ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | • ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | • ENUM IDENTIFIER
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  130 function_specifier: • INLINE
  174 statement: • labeled_statement
  175          | • compound_statement
  176          | • expression_statement
  177          | • selection_statement
  178          | • iteration_statement
  179          | • jump_statement
  180 labeled_statement: • IDENTIFIER COLON statement
  181                  | • CASE constant_expression COLON statement
  182                  | • DEFAULT COLON statement
  183 compound_statement: • CURBRAOPEN block_item_list CURBRACLOSE
  184                   | • CURBRAOPEN CURBRACLOSE
  186 block_item_list: block_item_list M • block_item
  187 block_item: • declaration
  188           | • statement
  189 expression_statement: • expression SEMICOLON
  190                     | • SEMICOLON
  191 selection_statement: • IF ROBRAOPEN expression N ROBRACLOSE M statement N
  192                    | • IF ROBRAOPEN expression N ROBRACLOSE M statement N ELSE M statement
  193                    | • SWITCH ROBRAOPEN expression ROBRACLOSE statement
  194 iteration_statement: • WHILE M ROBRAOPEN expression ROBRACLOSE M statement
  195                    | • DO M statement M WHILE ROBRAOPEN expression ROBRACLOSE SEMICOLON
  196                    | • FOR ROBRAOPEN expression_statement M expression_statement ROBRACLOSE M statement
  197                    | • FOR ROBRAOPEN expression_statement M expression_statement M expression N ROBRACLOSE M statement
  198 jump_statement: • GOTO IDENTIFIER SEMICOLON
  199               | • CONTINUE SEMICOLON
  200               | • BREAK SEMICOLON
  201               | • RETURN expression SEMICOLON
  202               | • RETURN SEMICOLON

    AUTO                  shift, and go to state 1
    ENUM                  shift, and go to state 2
    RESTRICT              shift, and go to state 3
    UNSIGNED              shift, and go to state 4
    BREAK                 shift, and go to state 186
    EXTERN                shift, and go to state 5
    RETURN                shift, and go to state 187
    VOID                  shift, and go to state 6
    CASE                  shift, and go to state 188
    FLOAT                 shift, and go to state 7
    SHORT                 shift, and go to state 8
    VOLATILE              shift, and go to state 9
    CHAR                  shift, and go to state 10
    FOR                   shift, and go to state 189
    SIGNED                shift, and go to state 11
    WHILE                 shift, and go to state 190
    CONST                 shift, and go to state 12
    GOTO                  shift, and go to state 191
    SIZEOF                shift, and go to state 76
    BOOL                  shift, and go to state 13
    CONTINUE              shift, and go to state 192
    IF                    shift, and go to state 193
    STATIC                shift, and go to state 14
    COMPLEX               shift, and go to state 15
    DEFAULT               shift, and go to state 194
    INLINE                shift, and go to state 16
    IMAGINARY             shift, and go to state 17
    DO                    shift, and go to state 195
    INT                   shift, and go to state 18
    SWITCH                shift, and go to state 196
    DOUBLE                shift, and go to state 19
    LONG                  shift, and go to state 20
    REGISTER              shift, and go to state 21
    IDENTIFIER            shift, and go to state 197
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 112
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92
    SEMICOLON             shift, and go to state 199

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 200
    declaration                go to state 201
    declaration_specifiers     go to state 61
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 202
    labeled_statement          go to state 203
    compound_statement         go to state 204
    block_item                 go to state 316
    expression_statement       go to state 207
    selection_statement        go to state 208
    iteration_statement        go to state 209
    jump_statement             go to state 210


State 283

  140 direct_declarator: direct_declarator SQBRAOPEN STATIC assignment_expression SQBRACLOSE •

    $default  reduce using rule 140 (direct_declarator)


State 284

  139 direct_declarator: direct_declarator SQBRAOPEN STATIC type_qualifier_list assignment_expression • SQBRACLOSE

    SQBRACLOSE  shift, and go to state 317


State 285

  141 direct_declarator: direct_declarator SQBRAOPEN type_qualifier_list MUL SQBRACLOSE •

    $default  reduce using rule 141 (direct_declarator)


State 286

  135 direct_declarator: direct_declarator SQBRAOPEN type_qualifier_list assignment_expression SQBRACLOSE •

    $default  reduce using rule 135 (direct_declarator)


State 287

  157 parameter_declaration: declaration_specifiers declarator •

    $default  reduce using rule 157 (parameter_declaration)


State 288

  143 direct_declarator: direct_declarator ROBRAOPEN CT parameter_type_list ROBRACLOSE •

    $default  reduce using rule 143 (direct_declarator)


State 289

   85 declaration_specifiers: • storage_class_specifier declaration_specifiers
   86                       | • storage_class_specifier
   87                       | • type_specifier declaration_specifiers
   88                       | • type_specifier
   89                       | • type_qualifier declaration_specifiers
   90                       | • type_qualifier
   91                       | • function_specifier declaration_specifiers
   92                       | • function_specifier
   97 storage_class_specifier: • EXTERN
   98                        | • STATIC
   99                        | • AUTO
  100                        | • REGISTER
  101 type_specifier: • VOID
  102               | • CHAR
  103               | • SHORT
  104               | • INT
  105               | • LONG
  106               | • FLOAT
  107               | • DOUBLE
  108               | • SIGNED
  109               | • UNSIGNED
  110               | • BOOL
  111               | • COMPLEX
  112               | • IMAGINARY
  113               | • enum_specifier
  118 enum_specifier: • ENUM IDENTIFIER CURBRAOPEN enumerator_list CURBRACLOSE
  119               | • ENUM CURBRAOPEN enumerator_list CURBRACLOSE
  120               | • ENUM IDENTIFIER CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  121               | • ENUM CURBRAOPEN enumerator_list COMMA CURBRACLOSE
  122               | • ENUM IDENTIFIER
  127 type_qualifier: • CONST
  128               | • RESTRICT
  129               | • VOLATILE
  130 function_specifier: • INLINE
  154 parameter_type_list: parameter_list COMMA • DOTS
  156 parameter_list: parameter_list COMMA • parameter_declaration
  157 parameter_declaration: • declaration_specifiers declarator
  158                      | • declaration_specifiers

    AUTO       shift, and go to state 1
    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    EXTERN     shift, and go to state 5
    VOID       shift, and go to state 6
    FLOAT      shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR       shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL       shift, and go to state 13
    STATIC     shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT        shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21
    DOTS       shift, and go to state 318

    declaration_specifiers   go to state 220
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    parameter_declaration    go to state 319


State 290

  160 identifier_list: identifier_list COMMA IDENTIFIER •

    $default  reduce using rule 160 (identifier_list)


State 291

   17 postfix_expression: ROBRAOPEN type_name ROBRACLOSE • CURBRAOPEN initializer_list CURBRACLOSE
   18                   | ROBRAOPEN type_name ROBRACLOSE • CURBRAOPEN initializer_list COMMA CURBRACLOSE
   26 unary_expression: SIZEOF ROBRAOPEN type_name ROBRACLOSE •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AMP, MUL, ADD, SUB, DIV, MODULO, SHL, SHR, BITSHL, BITSHR, LTE, GTE, EQ, NEQ, BITXOR, BITOR, AND, OR, QUESTION, COLON, SEMICOLON, ASSIGN, STAREQ, DIVEQ, MODEQ, PLUSEQ, MINUSEQ, SHLEQ, SHREQ, BINANDEQ, BINXOREQ, BINOREQ, COMMA]

    CURBRAOPEN  shift, and go to state 293

    $default  reduce using rule 26 (unary_expression)


State 292

   81 expression: expression COMMA assignment_expression •

    $default  reduce using rule 81 (expression)


State 293

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   17                   | ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN • initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   18                   | ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN • initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
  162 initializer: • assignment_expression
  163            | • CURBRAOPEN initializer_list CURBRACLOSE
  164            | • CURBRAOPEN initializer_list COMMA CURBRACLOSE
  165 initializer_list: • designation initializer
  166                 | • initializer
  167                 | • initializer_list COMMA designation initializer
  168                 | • initializer_list COMMA initializer
  169 designation: • designator_list ASSIGN
  170 designator_list: • designator
  171                | • designator_list designator
  172 designator: • SQBRAOPEN constant_expression SQBRACLOSE
  173           | • DOT IDENTIFIER

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    SQBRAOPEN             shift, and go to state 139
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 84
    DOT                   shift, and go to state 140
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 110
    initializer                go to state 141
    initializer_list           go to state 320
    designation                go to state 143
    designator_list            go to state 144
    designator                 go to state 145


State 294

   34 cast_expression: ROBRAOPEN type_name ROBRACLOSE cast_expression •

    $default  reduce using rule 34 (cast_expression)


State 295

  172 designator: SQBRAOPEN constant_expression SQBRACLOSE •

    $default  reduce using rule 172 (designator)


State 296

  164 initializer: CURBRAOPEN initializer_list COMMA CURBRACLOSE •

    $default  reduce using rule 164 (initializer)


State 297

  168 initializer_list: initializer_list COMMA initializer •

    $default  reduce using rule 168 (initializer_list)


State 298

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
  162 initializer: • assignment_expression
  163            | • CURBRAOPEN initializer_list CURBRACLOSE
  164            | • CURBRAOPEN initializer_list COMMA CURBRACLOSE
  167 initializer_list: initializer_list COMMA designation • initializer

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 84
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 110
    initializer                go to state 321


State 299

   17 postfix_expression: ROBRAOPEN type_name ROBRACLOSE • CURBRAOPEN initializer_list CURBRACLOSE
   18                   | ROBRAOPEN type_name ROBRACLOSE • CURBRAOPEN initializer_list COMMA CURBRACLOSE

    CURBRAOPEN  shift, and go to state 293


State 300

   10 postfix_expression: postfix_expression SQBRAOPEN expression SQBRACLOSE •

    $default  reduce using rule 10 (postfix_expression)


State 301

   12 postfix_expression: postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE •

    $default  reduce using rule 12 (postfix_expression)


State 302

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   20 argument_expression_list: argument_expression_list COMMA • assignment_expression
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 322


State 303

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   60 logical_AND_expression: logical_AND_expression N AND M • inclusive_OR_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 323


State 304

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   62 logical_OR_expression: logical_OR_expression N OR M • logical_AND_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 324


State 305

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   66                       | logical_OR_expression N QUESTION M • expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 325


State 306

  201 jump_statement: RETURN expression SEMICOLON •

    $default  reduce using rule 201 (jump_statement)


State 307

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  174 statement: • labeled_statement
  175          | • compound_statement
  176          | • expression_statement
  177          | • selection_statement
  178          | • iteration_statement
  179          | • jump_statement
  180 labeled_statement: • IDENTIFIER COLON statement
  181                  | • CASE constant_expression COLON statement
  181                  | CASE constant_expression COLON • statement
  182                  | • DEFAULT COLON statement
  183 compound_statement: • CURBRAOPEN block_item_list CURBRACLOSE
  184                   | • CURBRAOPEN CURBRACLOSE
  189 expression_statement: • expression SEMICOLON
  190                     | • SEMICOLON
  191 selection_statement: • IF ROBRAOPEN expression N ROBRACLOSE M statement N
  192                    | • IF ROBRAOPEN expression N ROBRACLOSE M statement N ELSE M statement
  193                    | • SWITCH ROBRAOPEN expression ROBRACLOSE statement
  194 iteration_statement: • WHILE M ROBRAOPEN expression ROBRACLOSE M statement
  195                    | • DO M statement M WHILE ROBRAOPEN expression ROBRACLOSE SEMICOLON
  196                    | • FOR ROBRAOPEN expression_statement M expression_statement ROBRACLOSE M statement
  197                    | • FOR ROBRAOPEN expression_statement M expression_statement M expression N ROBRACLOSE M statement
  198 jump_statement: • GOTO IDENTIFIER SEMICOLON
  199               | • CONTINUE SEMICOLON
  200               | • BREAK SEMICOLON
  201               | • RETURN expression SEMICOLON
  202               | • RETURN SEMICOLON

    BREAK                 shift, and go to state 186
    RETURN                shift, and go to state 187
    CASE                  shift, and go to state 188
    FOR                   shift, and go to state 189
    WHILE                 shift, and go to state 190
    GOTO                  shift, and go to state 191
    SIZEOF                shift, and go to state 76
    CONTINUE              shift, and go to state 192
    IF                    shift, and go to state 193
    DEFAULT               shift, and go to state 194
    DO                    shift, and go to state 195
    SWITCH                shift, and go to state 196
    IDENTIFIER            shift, and go to state 197
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 112
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92
    SEMICOLON             shift, and go to state 199

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 200
    statement                  go to state 326
    labeled_statement          go to state 203
    compound_statement         go to state 204
    expression_statement       go to state 207
    selection_statement        go to state 208
    iteration_statement        go to state 209
    jump_statement             go to state 210


State 308

   63 M: ε •
  196 iteration_statement: FOR ROBRAOPEN expression_statement • M expression_statement ROBRACLOSE M statement
  197                    | FOR ROBRAOPEN expression_statement • M expression_statement M expression N ROBRACLOSE M statement

    $default  reduce using rule 63 (M)

    M  go to state 327


State 309

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  194 iteration_statement: WHILE M ROBRAOPEN • expression ROBRACLOSE M statement

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 328


State 310

  198 jump_statement: GOTO IDENTIFIER SEMICOLON •

    $default  reduce using rule 198 (jump_statement)


State 311

   64 N: ε •  [ROBRACLOSE]
   81 expression: expression • COMMA assignment_expression
  191 selection_statement: IF ROBRAOPEN expression • N ROBRACLOSE M statement N
  192                    | IF ROBRAOPEN expression • N ROBRACLOSE M statement N ELSE M statement

    COMMA  shift, and go to state 229

    $default  reduce using rule 64 (N)

    N  go to state 329


State 312

  182 labeled_statement: DEFAULT COLON statement •

    $default  reduce using rule 182 (labeled_statement)


State 313

   63 M: ε •
  195 iteration_statement: DO M statement • M WHILE ROBRAOPEN expression ROBRACLOSE SEMICOLON

    $default  reduce using rule 63 (M)

    M  go to state 330


State 314

   81 expression: expression • COMMA assignment_expression
  193 selection_statement: SWITCH ROBRAOPEN expression • ROBRACLOSE statement

    ROBRACLOSE  shift, and go to state 331
    COMMA       shift, and go to state 229


State 315

  180 labeled_statement: IDENTIFIER COLON statement •

    $default  reduce using rule 180 (labeled_statement)


State 316

  186 block_item_list: block_item_list M block_item •

    $default  reduce using rule 186 (block_item_list)


State 317

  139 direct_declarator: direct_declarator SQBRAOPEN STATIC type_qualifier_list assignment_expression SQBRACLOSE •

    $default  reduce using rule 139 (direct_declarator)


State 318

  154 parameter_type_list: parameter_list COMMA DOTS •

    $default  reduce using rule 154 (parameter_type_list)


State 319

  156 parameter_list: parameter_list COMMA parameter_declaration •

    $default  reduce using rule 156 (parameter_list)


State 320

   17 postfix_expression: ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list • CURBRACLOSE
   18                   | ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list • COMMA CURBRACLOSE
  167 initializer_list: initializer_list • COMMA designation initializer
  168                 | initializer_list • COMMA initializer

    CURBRACLOSE  shift, and go to state 332
    COMMA        shift, and go to state 333


State 321

  167 initializer_list: initializer_list COMMA designation initializer •

    $default  reduce using rule 167 (initializer_list)


State 322

   20 argument_expression_list: argument_expression_list COMMA assignment_expression •

    $default  reduce using rule 20 (argument_expression_list)


State 323

   58 inclusive_OR_expression: inclusive_OR_expression • BITOR exclusive_OR_expression
   60 logical_AND_expression: logical_AND_expression N AND M inclusive_OR_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, AND, OR, QUESTION, COLON, SEMICOLON, COMMA]

    BITOR  shift, and go to state 183

    $default  reduce using rule 60 (logical_AND_expression)


State 324

   60 logical_AND_expression: logical_AND_expression • N AND M inclusive_OR_expression
   62 logical_OR_expression: logical_OR_expression N OR M logical_AND_expression •  [SQBRACLOSE, ROBRACLOSE, CURBRACLOSE, OR, QUESTION, COLON, SEMICOLON, COMMA]
   64 N: ε •  [AND]

    AND       reduce using rule 64 (N)
    $default  reduce using rule 62 (logical_OR_expression)

    N  go to state 184


State 325

   64 N: ε •  [COLON]
   66 conditional_expression: logical_OR_expression N QUESTION M expression • N COLON M conditional_expression
   81 expression: expression • COMMA assignment_expression

    COMMA  shift, and go to state 229

    $default  reduce using rule 64 (N)

    N  go to state 334


State 326

  181 labeled_statement: CASE constant_expression COLON statement •

    $default  reduce using rule 181 (labeled_statement)


State 327

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  189 expression_statement: • expression SEMICOLON
  190                     | • SEMICOLON
  196 iteration_statement: FOR ROBRAOPEN expression_statement M • expression_statement ROBRACLOSE M statement
  197                    | FOR ROBRAOPEN expression_statement M • expression_statement M expression N ROBRACLOSE M statement

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92
    SEMICOLON             shift, and go to state 199

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 200
    expression_statement       go to state 335


State 328

   81 expression: expression • COMMA assignment_expression
  194 iteration_statement: WHILE M ROBRAOPEN expression • ROBRACLOSE M statement

    ROBRACLOSE  shift, and go to state 336
    COMMA       shift, and go to state 229


State 329

  191 selection_statement: IF ROBRAOPEN expression N • ROBRACLOSE M statement N
  192                    | IF ROBRAOPEN expression N • ROBRACLOSE M statement N ELSE M statement

    ROBRACLOSE  shift, and go to state 337


State 330

  195 iteration_statement: DO M statement M • WHILE ROBRAOPEN expression ROBRACLOSE SEMICOLON

    WHILE  shift, and go to state 338


State 331

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  174 statement: • labeled_statement
  175          | • compound_statement
  176          | • expression_statement
  177          | • selection_statement
  178          | • iteration_statement
  179          | • jump_statement
  180 labeled_statement: • IDENTIFIER COLON statement
  181                  | • CASE constant_expression COLON statement
  182                  | • DEFAULT COLON statement
  183 compound_statement: • CURBRAOPEN block_item_list CURBRACLOSE
  184                   | • CURBRAOPEN CURBRACLOSE
  189 expression_statement: • expression SEMICOLON
  190                     | • SEMICOLON
  191 selection_statement: • IF ROBRAOPEN expression N ROBRACLOSE M statement N
  192                    | • IF ROBRAOPEN expression N ROBRACLOSE M statement N ELSE M statement
  193                    | • SWITCH ROBRAOPEN expression ROBRACLOSE statement
  193                    | SWITCH ROBRAOPEN expression ROBRACLOSE • statement
  194 iteration_statement: • WHILE M ROBRAOPEN expression ROBRACLOSE M statement
  195                    | • DO M statement M WHILE ROBRAOPEN expression ROBRACLOSE SEMICOLON
  196                    | • FOR ROBRAOPEN expression_statement M expression_statement ROBRACLOSE M statement
  197                    | • FOR ROBRAOPEN expression_statement M expression_statement M expression N ROBRACLOSE M statement
  198 jump_statement: • GOTO IDENTIFIER SEMICOLON
  199               | • CONTINUE SEMICOLON
  200               | • BREAK SEMICOLON
  201               | • RETURN expression SEMICOLON
  202               | • RETURN SEMICOLON

    BREAK                 shift, and go to state 186
    RETURN                shift, and go to state 187
    CASE                  shift, and go to state 188
    FOR                   shift, and go to state 189
    WHILE                 shift, and go to state 190
    GOTO                  shift, and go to state 191
    SIZEOF                shift, and go to state 76
    CONTINUE              shift, and go to state 192
    IF                    shift, and go to state 193
    DEFAULT               shift, and go to state 194
    DO                    shift, and go to state 195
    SWITCH                shift, and go to state 196
    IDENTIFIER            shift, and go to state 197
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 112
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92
    SEMICOLON             shift, and go to state 199

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 200
    statement                  go to state 339
    labeled_statement          go to state 203
    compound_statement         go to state 204
    expression_statement       go to state 207
    selection_statement        go to state 208
    iteration_statement        go to state 209
    jump_statement             go to state 210


State 332

   17 postfix_expression: ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE •

    $default  reduce using rule 17 (postfix_expression)


State 333

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   18                   | ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA • CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
  162 initializer: • assignment_expression
  163            | • CURBRAOPEN initializer_list CURBRACLOSE
  164            | • CURBRAOPEN initializer_list COMMA CURBRACLOSE
  167 initializer_list: initializer_list COMMA • designation initializer
  168                 | initializer_list COMMA • initializer
  169 designation: • designator_list ASSIGN
  170 designator_list: • designator
  171                | • designator_list designator
  172 designator: • SQBRAOPEN constant_expression SQBRACLOSE
  173           | • DOT IDENTIFIER

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    SQBRAOPEN             shift, and go to state 139
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 84
    CURBRACLOSE           shift, and go to state 340
    DOT                   shift, and go to state 140
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 110
    initializer                go to state 297
    designation                go to state 298
    designator_list            go to state 144
    designator                 go to state 145


State 334

   66 conditional_expression: logical_OR_expression N QUESTION M expression N • COLON M conditional_expression

    COLON  shift, and go to state 341


State 335

   63 M: ε •  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, ENUMERATION_CONSTANT, STRING_LITERAL, ROBRAOPEN, INC, DEC, AMP, MUL, ADD, SUB, NEG, EXCLAIM]
  196 iteration_statement: FOR ROBRAOPEN expression_statement M expression_statement • ROBRACLOSE M statement
  197                    | FOR ROBRAOPEN expression_statement M expression_statement • M expression N ROBRACLOSE M statement

    ROBRACLOSE  shift, and go to state 342

    $default  reduce using rule 63 (M)

    M  go to state 343


State 336

   63 M: ε •
  194 iteration_statement: WHILE M ROBRAOPEN expression ROBRACLOSE • M statement

    $default  reduce using rule 63 (M)

    M  go to state 344


State 337

   63 M: ε •
  191 selection_statement: IF ROBRAOPEN expression N ROBRACLOSE • M statement N
  192                    | IF ROBRAOPEN expression N ROBRACLOSE • M statement N ELSE M statement

    $default  reduce using rule 63 (M)

    M  go to state 345


State 338

  195 iteration_statement: DO M statement M WHILE • ROBRAOPEN expression ROBRACLOSE SEMICOLON

    ROBRAOPEN  shift, and go to state 346


State 339

  193 selection_statement: SWITCH ROBRAOPEN expression ROBRACLOSE statement •

    $default  reduce using rule 193 (selection_statement)


State 340

   18 postfix_expression: ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE •

    $default  reduce using rule 18 (postfix_expression)


State 341

   63 M: ε •
   66 conditional_expression: logical_OR_expression N QUESTION M expression N COLON • M conditional_expression

    $default  reduce using rule 63 (M)

    M  go to state 347


State 342

   63 M: ε •
  196 iteration_statement: FOR ROBRAOPEN expression_statement M expression_statement ROBRACLOSE • M statement

    $default  reduce using rule 63 (M)

    M  go to state 348


State 343

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  197 iteration_statement: FOR ROBRAOPEN expression_statement M expression_statement M • expression N ROBRACLOSE M statement

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 349


State 344

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  174 statement: • labeled_statement
  175          | • compound_statement
  176          | • expression_statement
  177          | • selection_statement
  178          | • iteration_statement
  179          | • jump_statement
  180 labeled_statement: • IDENTIFIER COLON statement
  181                  | • CASE constant_expression COLON statement
  182                  | • DEFAULT COLON statement
  183 compound_statement: • CURBRAOPEN block_item_list CURBRACLOSE
  184                   | • CURBRAOPEN CURBRACLOSE
  189 expression_statement: • expression SEMICOLON
  190                     | • SEMICOLON
  191 selection_statement: • IF ROBRAOPEN expression N ROBRACLOSE M statement N
  192                    | • IF ROBRAOPEN expression N ROBRACLOSE M statement N ELSE M statement
  193                    | • SWITCH ROBRAOPEN expression ROBRACLOSE statement
  194 iteration_statement: • WHILE M ROBRAOPEN expression ROBRACLOSE M statement
  194                    | WHILE M ROBRAOPEN expression ROBRACLOSE M • statement
  195                    | • DO M statement M WHILE ROBRAOPEN expression ROBRACLOSE SEMICOLON
  196                    | • FOR ROBRAOPEN expression_statement M expression_statement ROBRACLOSE M statement
  197                    | • FOR ROBRAOPEN expression_statement M expression_statement M expression N ROBRACLOSE M statement
  198 jump_statement: • GOTO IDENTIFIER SEMICOLON
  199               | • CONTINUE SEMICOLON
  200               | • BREAK SEMICOLON
  201               | • RETURN expression SEMICOLON
  202               | • RETURN SEMICOLON

    BREAK                 shift, and go to state 186
    RETURN                shift, and go to state 187
    CASE                  shift, and go to state 188
    FOR                   shift, and go to state 189
    WHILE                 shift, and go to state 190
    GOTO                  shift, and go to state 191
    SIZEOF                shift, and go to state 76
    CONTINUE              shift, and go to state 192
    IF                    shift, and go to state 193
    DEFAULT               shift, and go to state 194
    DO                    shift, and go to state 195
    SWITCH                shift, and go to state 196
    IDENTIFIER            shift, and go to state 197
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 112
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92
    SEMICOLON             shift, and go to state 199

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 200
    statement                  go to state 350
    labeled_statement          go to state 203
    compound_statement         go to state 204
    expression_statement       go to state 207
    selection_statement        go to state 208
    iteration_statement        go to state 209
    jump_statement             go to state 210


State 345

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  174 statement: • labeled_statement
  175          | • compound_statement
  176          | • expression_statement
  177          | • selection_statement
  178          | • iteration_statement
  179          | • jump_statement
  180 labeled_statement: • IDENTIFIER COLON statement
  181                  | • CASE constant_expression COLON statement
  182                  | • DEFAULT COLON statement
  183 compound_statement: • CURBRAOPEN block_item_list CURBRACLOSE
  184                   | • CURBRAOPEN CURBRACLOSE
  189 expression_statement: • expression SEMICOLON
  190                     | • SEMICOLON
  191 selection_statement: • IF ROBRAOPEN expression N ROBRACLOSE M statement N
  191                    | IF ROBRAOPEN expression N ROBRACLOSE M • statement N
  192                    | • IF ROBRAOPEN expression N ROBRACLOSE M statement N ELSE M statement
  192                    | IF ROBRAOPEN expression N ROBRACLOSE M • statement N ELSE M statement
  193                    | • SWITCH ROBRAOPEN expression ROBRACLOSE statement
  194 iteration_statement: • WHILE M ROBRAOPEN expression ROBRACLOSE M statement
  195                    | • DO M statement M WHILE ROBRAOPEN expression ROBRACLOSE SEMICOLON
  196                    | • FOR ROBRAOPEN expression_statement M expression_statement ROBRACLOSE M statement
  197                    | • FOR ROBRAOPEN expression_statement M expression_statement M expression N ROBRACLOSE M statement
  198 jump_statement: • GOTO IDENTIFIER SEMICOLON
  199               | • CONTINUE SEMICOLON
  200               | • BREAK SEMICOLON
  201               | • RETURN expression SEMICOLON
  202               | • RETURN SEMICOLON

    BREAK                 shift, and go to state 186
    RETURN                shift, and go to state 187
    CASE                  shift, and go to state 188
    FOR                   shift, and go to state 189
    WHILE                 shift, and go to state 190
    GOTO                  shift, and go to state 191
    SIZEOF                shift, and go to state 76
    CONTINUE              shift, and go to state 192
    IF                    shift, and go to state 193
    DEFAULT               shift, and go to state 194
    DO                    shift, and go to state 195
    SWITCH                shift, and go to state 196
    IDENTIFIER            shift, and go to state 197
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 112
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92
    SEMICOLON             shift, and go to state 199

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 200
    statement                  go to state 351
    labeled_statement          go to state 203
    compound_statement         go to state 204
    expression_statement       go to state 207
    selection_statement        go to state 208
    iteration_statement        go to state 209
    jump_statement             go to state 210


State 346

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  195 iteration_statement: DO M statement M WHILE ROBRAOPEN • expression ROBRACLOSE SEMICOLON

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 352


State 347

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   66                       | logical_OR_expression N QUESTION M expression N COLON M • conditional_expression

    SIZEOF                shift, and go to state 76
    IDENTIFIER            shift, and go to state 77
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 126
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 353


State 348

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  174 statement: • labeled_statement
  175          | • compound_statement
  176          | • expression_statement
  177          | • selection_statement
  178          | • iteration_statement
  179          | • jump_statement
  180 labeled_statement: • IDENTIFIER COLON statement
  181                  | • CASE constant_expression COLON statement
  182                  | • DEFAULT COLON statement
  183 compound_statement: • CURBRAOPEN block_item_list CURBRACLOSE
  184                   | • CURBRAOPEN CURBRACLOSE
  189 expression_statement: • expression SEMICOLON
  190                     | • SEMICOLON
  191 selection_statement: • IF ROBRAOPEN expression N ROBRACLOSE M statement N
  192                    | • IF ROBRAOPEN expression N ROBRACLOSE M statement N ELSE M statement
  193                    | • SWITCH ROBRAOPEN expression ROBRACLOSE statement
  194 iteration_statement: • WHILE M ROBRAOPEN expression ROBRACLOSE M statement
  195                    | • DO M statement M WHILE ROBRAOPEN expression ROBRACLOSE SEMICOLON
  196                    | • FOR ROBRAOPEN expression_statement M expression_statement ROBRACLOSE M statement
  196                    | FOR ROBRAOPEN expression_statement M expression_statement ROBRACLOSE M • statement
  197                    | • FOR ROBRAOPEN expression_statement M expression_statement M expression N ROBRACLOSE M statement
  198 jump_statement: • GOTO IDENTIFIER SEMICOLON
  199               | • CONTINUE SEMICOLON
  200               | • BREAK SEMICOLON
  201               | • RETURN expression SEMICOLON
  202               | • RETURN SEMICOLON

    BREAK                 shift, and go to state 186
    RETURN                shift, and go to state 187
    CASE                  shift, and go to state 188
    FOR                   shift, and go to state 189
    WHILE                 shift, and go to state 190
    GOTO                  shift, and go to state 191
    SIZEOF                shift, and go to state 76
    CONTINUE              shift, and go to state 192
    IF                    shift, and go to state 193
    DEFAULT               shift, and go to state 194
    DO                    shift, and go to state 195
    SWITCH                shift, and go to state 196
    IDENTIFIER            shift, and go to state 197
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 112
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92
    SEMICOLON             shift, and go to state 199

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 200
    statement                  go to state 354
    labeled_statement          go to state 203
    compound_statement         go to state 204
    expression_statement       go to state 207
    selection_statement        go to state 208
    iteration_statement        go to state 209
    jump_statement             go to state 210


State 349

   64 N: ε •  [ROBRACLOSE]
   81 expression: expression • COMMA assignment_expression
  197 iteration_statement: FOR ROBRAOPEN expression_statement M expression_statement M expression • N ROBRACLOSE M statement

    COMMA  shift, and go to state 229

    $default  reduce using rule 64 (N)

    N  go to state 355


State 350

  194 iteration_statement: WHILE M ROBRAOPEN expression ROBRACLOSE M statement •

    $default  reduce using rule 194 (iteration_statement)


State 351

   64 N: ε •
  191 selection_statement: IF ROBRAOPEN expression N ROBRACLOSE M statement • N
  192                    | IF ROBRAOPEN expression N ROBRACLOSE M statement • N ELSE M statement

    $default  reduce using rule 64 (N)

    N  go to state 356


State 352

   81 expression: expression • COMMA assignment_expression
  195 iteration_statement: DO M statement M WHILE ROBRAOPEN expression • ROBRACLOSE SEMICOLON

    ROBRACLOSE  shift, and go to state 357
    COMMA       shift, and go to state 229


State 353

   66 conditional_expression: logical_OR_expression N QUESTION M expression N COLON M conditional_expression •

    $default  reduce using rule 66 (conditional_expression)


State 354

  196 iteration_statement: FOR ROBRAOPEN expression_statement M expression_statement ROBRACLOSE M statement •

    $default  reduce using rule 196 (iteration_statement)


State 355

  197 iteration_statement: FOR ROBRAOPEN expression_statement M expression_statement M expression N • ROBRACLOSE M statement

    ROBRACLOSE  shift, and go to state 358


State 356

  191 selection_statement: IF ROBRAOPEN expression N ROBRACLOSE M statement N •  [AUTO, ENUM, RESTRICT, UNSIGNED, BREAK, EXTERN, RETURN, VOID, CASE, FLOAT, SHORT, VOLATILE, CHAR, FOR, SIGNED, WHILE, CONST, GOTO, SIZEOF, BOOL, CONTINUE, IF, STATIC, COMPLEX, DEFAULT, INLINE, IMAGINARY, DO, INT, SWITCH, DOUBLE, LONG, REGISTER, IDENTIFIER, INTEGER_CONSTANT, FLOATING_CONSTANT, CHARACTER_CONSTANT, ENUMERATION_CONSTANT, STRING_LITERAL, ROBRAOPEN, CURBRAOPEN, CURBRACLOSE, INC, DEC, AMP, MUL, ADD, SUB, NEG, EXCLAIM, SEMICOLON]
  192                    | IF ROBRAOPEN expression N ROBRACLOSE M statement N • ELSE M statement

    ELSE  shift, and go to state 359

    $default  reduce using rule 191 (selection_statement)

    Conflict between rule 191 and token ELSE resolved as shift (%right ELSE).


State 357

  195 iteration_statement: DO M statement M WHILE ROBRAOPEN expression ROBRACLOSE • SEMICOLON

    SEMICOLON  shift, and go to state 360


State 358

   63 M: ε •
  197 iteration_statement: FOR ROBRAOPEN expression_statement M expression_statement M expression N ROBRACLOSE • M statement

    $default  reduce using rule 63 (M)

    M  go to state 361


State 359

   63 M: ε •
  192 selection_statement: IF ROBRAOPEN expression N ROBRACLOSE M statement N ELSE • M statement

    $default  reduce using rule 63 (M)

    M  go to state 362


State 360

  195 iteration_statement: DO M statement M WHILE ROBRAOPEN expression ROBRACLOSE SEMICOLON •

    $default  reduce using rule 195 (iteration_statement)


State 361

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  174 statement: • labeled_statement
  175          | • compound_statement
  176          | • expression_statement
  177          | • selection_statement
  178          | • iteration_statement
  179          | • jump_statement
  180 labeled_statement: • IDENTIFIER COLON statement
  181                  | • CASE constant_expression COLON statement
  182                  | • DEFAULT COLON statement
  183 compound_statement: • CURBRAOPEN block_item_list CURBRACLOSE
  184                   | • CURBRAOPEN CURBRACLOSE
  189 expression_statement: • expression SEMICOLON
  190                     | • SEMICOLON
  191 selection_statement: • IF ROBRAOPEN expression N ROBRACLOSE M statement N
  192                    | • IF ROBRAOPEN expression N ROBRACLOSE M statement N ELSE M statement
  193                    | • SWITCH ROBRAOPEN expression ROBRACLOSE statement
  194 iteration_statement: • WHILE M ROBRAOPEN expression ROBRACLOSE M statement
  195                    | • DO M statement M WHILE ROBRAOPEN expression ROBRACLOSE SEMICOLON
  196                    | • FOR ROBRAOPEN expression_statement M expression_statement ROBRACLOSE M statement
  197                    | • FOR ROBRAOPEN expression_statement M expression_statement M expression N ROBRACLOSE M statement
  197                    | FOR ROBRAOPEN expression_statement M expression_statement M expression N ROBRACLOSE M • statement
  198 jump_statement: • GOTO IDENTIFIER SEMICOLON
  199               | • CONTINUE SEMICOLON
  200               | • BREAK SEMICOLON
  201               | • RETURN expression SEMICOLON
  202               | • RETURN SEMICOLON

    BREAK                 shift, and go to state 186
    RETURN                shift, and go to state 187
    CASE                  shift, and go to state 188
    FOR                   shift, and go to state 189
    WHILE                 shift, and go to state 190
    GOTO                  shift, and go to state 191
    SIZEOF                shift, and go to state 76
    CONTINUE              shift, and go to state 192
    IF                    shift, and go to state 193
    DEFAULT               shift, and go to state 194
    DO                    shift, and go to state 195
    SWITCH                shift, and go to state 196
    IDENTIFIER            shift, and go to state 197
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 112
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92
    SEMICOLON             shift, and go to state 199

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 200
    statement                  go to state 363
    labeled_statement          go to state 203
    compound_statement         go to state 204
    expression_statement       go to state 207
    selection_statement        go to state 208
    iteration_statement        go to state 209
    jump_statement             go to state 210


State 362

    1 primary_expression: • IDENTIFIER
    2                   | • constant
    3                   | • STRING_LITERAL
    4                   | • ROBRAOPEN expression ROBRACLOSE
    5 constant: • INTEGER_CONSTANT
    6         | • FLOATING_CONSTANT
    7         | • ENUMERATION_CONSTANT
    8         | • CHARACTER_CONSTANT
    9 postfix_expression: • primary_expression
   10                   | • postfix_expression SQBRAOPEN expression SQBRACLOSE
   11                   | • postfix_expression ROBRAOPEN ROBRACLOSE
   12                   | • postfix_expression ROBRAOPEN argument_expression_list ROBRACLOSE
   13                   | • postfix_expression DOT IDENTIFIER
   14                   | • postfix_expression ACC IDENTIFIER
   15                   | • postfix_expression INC
   16                   | • postfix_expression DEC
   17                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list CURBRACLOSE
   18                   | • ROBRAOPEN type_name ROBRACLOSE CURBRAOPEN initializer_list COMMA CURBRACLOSE
   21 unary_expression: • postfix_expression
   22                 | • INC unary_expression
   23                 | • DEC unary_expression
   24                 | • unary_operator cast_expression
   25                 | • SIZEOF unary_expression
   26                 | • SIZEOF ROBRAOPEN type_name ROBRACLOSE
   27 unary_operator: • AMP
   28               | • MUL
   29               | • ADD
   30               | • SUB
   31               | • NEG
   32               | • EXCLAIM
   33 cast_expression: • unary_expression
   34                | • ROBRAOPEN type_name ROBRACLOSE cast_expression
   35 multiplicative_expression: • cast_expression
   36                          | • multiplicative_expression MUL cast_expression
   37                          | • multiplicative_expression DIV cast_expression
   38                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: • multiplicative_expression
   40                    | • additive_expression ADD multiplicative_expression
   41                    | • additive_expression SUB multiplicative_expression
   42 shift_expression: • additive_expression
   43                 | • shift_expression SHL additive_expression
   44                 | • shift_expression SHR additive_expression
   45 relational_expression: • shift_expression
   46                      | • relational_expression BITSHL shift_expression
   47                      | • relational_expression BITSHR shift_expression
   48                      | • relational_expression LTE shift_expression
   49                      | • relational_expression GTE shift_expression
   50 equality_expression: • relational_expression
   51                    | • equality_expression EQ relational_expression
   52                    | • equality_expression NEQ relational_expression
   53 AND_expression: • equality_expression
   54               | • AND_expression AMP equality_expression
   55 exclusive_OR_expression: • AND_expression
   56                        | • exclusive_OR_expression BITXOR AND_expression
   57 inclusive_OR_expression: • exclusive_OR_expression
   58                        | • inclusive_OR_expression BITOR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression N AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression N OR M logical_AND_expression
   65 conditional_expression: • logical_OR_expression
   66                       | • logical_OR_expression N QUESTION M expression N COLON M conditional_expression
   67 assignment_expression: • conditional_expression
   68                      | • unary_expression assignment_operator assignment_expression
   80 expression: • assignment_expression
   81           | • expression COMMA assignment_expression
  174 statement: • labeled_statement
  175          | • compound_statement
  176          | • expression_statement
  177          | • selection_statement
  178          | • iteration_statement
  179          | • jump_statement
  180 labeled_statement: • IDENTIFIER COLON statement
  181                  | • CASE constant_expression COLON statement
  182                  | • DEFAULT COLON statement
  183 compound_statement: • CURBRAOPEN block_item_list CURBRACLOSE
  184                   | • CURBRAOPEN CURBRACLOSE
  189 expression_statement: • expression SEMICOLON
  190                     | • SEMICOLON
  191 selection_statement: • IF ROBRAOPEN expression N ROBRACLOSE M statement N
  192                    | • IF ROBRAOPEN expression N ROBRACLOSE M statement N ELSE M statement
  192                    | IF ROBRAOPEN expression N ROBRACLOSE M statement N ELSE M • statement
  193                    | • SWITCH ROBRAOPEN expression ROBRACLOSE statement
  194 iteration_statement: • WHILE M ROBRAOPEN expression ROBRACLOSE M statement
  195                    | • DO M statement M WHILE ROBRAOPEN expression ROBRACLOSE SEMICOLON
  196                    | • FOR ROBRAOPEN expression_statement M expression_statement ROBRACLOSE M statement
  197                    | • FOR ROBRAOPEN expression_statement M expression_statement M expression N ROBRACLOSE M statement
  198 jump_statement: • GOTO IDENTIFIER SEMICOLON
  199               | • CONTINUE SEMICOLON
  200               | • BREAK SEMICOLON
  201               | • RETURN expression SEMICOLON
  202               | • RETURN SEMICOLON

    BREAK                 shift, and go to state 186
    RETURN                shift, and go to state 187
    CASE                  shift, and go to state 188
    FOR                   shift, and go to state 189
    WHILE                 shift, and go to state 190
    GOTO                  shift, and go to state 191
    SIZEOF                shift, and go to state 76
    CONTINUE              shift, and go to state 192
    IF                    shift, and go to state 193
    DEFAULT               shift, and go to state 194
    DO                    shift, and go to state 195
    SWITCH                shift, and go to state 196
    IDENTIFIER            shift, and go to state 197
    INTEGER_CONSTANT      shift, and go to state 78
    FLOATING_CONSTANT     shift, and go to state 79
    CHARACTER_CONSTANT    shift, and go to state 80
    ENUMERATION_CONSTANT  shift, and go to state 81
    STRING_LITERAL        shift, and go to state 82
    ROBRAOPEN             shift, and go to state 83
    CURBRAOPEN            shift, and go to state 112
    INC                   shift, and go to state 85
    DEC                   shift, and go to state 86
    AMP                   shift, and go to state 87
    MUL                   shift, and go to state 88
    ADD                   shift, and go to state 89
    SUB                   shift, and go to state 90
    NEG                   shift, and go to state 91
    EXCLAIM               shift, and go to state 92
    SEMICOLON             shift, and go to state 199

    primary_expression         go to state 93
    constant                   go to state 94
    postfix_expression         go to state 95
    unary_expression           go to state 96
    unary_operator             go to state 97
    cast_expression            go to state 98
    multiplicative_expression  go to state 99
    additive_expression        go to state 100
    shift_expression           go to state 101
    relational_expression      go to state 102
    equality_expression        go to state 103
    AND_expression             go to state 104
    exclusive_OR_expression    go to state 105
    inclusive_OR_expression    go to state 106
    logical_AND_expression     go to state 107
    logical_OR_expression      go to state 108
    conditional_expression     go to state 109
    assignment_expression      go to state 133
    expression                 go to state 200
    statement                  go to state 364
    labeled_statement          go to state 203
    compound_statement         go to state 204
    expression_statement       go to state 207
    selection_statement        go to state 208
    iteration_statement        go to state 209
    jump_statement             go to state 210


State 363

  197 iteration_statement: FOR ROBRAOPEN expression_statement M expression_statement M expression N ROBRACLOSE M statement •

    $default  reduce using rule 197 (iteration_statement)


State 364

  192 selection_statement: IF ROBRAOPEN expression N ROBRACLOSE M statement N ELSE M statement •

    $default  reduce using rule 192 (selection_statement)
